{
    "define": {
        "SwitchLevel": "<Depth:switchAfter>",
        "FastDestinations": "<Depth:fastDestinations>",
        "SwitchLevelDestinations": "(if (< \"SwitchLevel\" (state at:(var \"LastTo\"))) (\"FastDestinations\") (sites (values Remembered \"All\"))",
        "UpdateStep": "(if (is Empty (ahead (site) #2)) (remember Value \"All\" (ahead (site) #2) unique:True) (remember Value #1 (ahead (site) #2) unique:True)",
        "ForwardSteps": "(if (is In (site) (union {(values Remembered #1) (values Remembered \"All\")}) ) (seq { (\"UpdateStep\" #1 #2) (\"UpdateStep\" #1 #3) }",
        "NextSites": "(do (set Pending (sites (union { (values Remembered \"All\") (values Remembered \"NNE_SSW\") (values Remembered \"NNW_SSE\") (values Remembered \"E_W\") } ))) next:(forEach Site (sites Pending) (and { (remember Value (site)) (\"ForwardSteps\" \"NNE_SSW\" NNE SSW) (\"ForwardSteps\" \"NNW_SSE\" NNW SSE) (\"ForwardSteps\" \"E_W\" E W) }",
        "FindDestinations": "(seq { (set Var \"StepCount\" (state at:(var \"LastTo\"))) (remember Value \"All\" (var \"LastTo\")) (while (< 0 (var \"StepCount\")) (seq { (set Var \"StepCount\" (- (var \"StepCount\") 1)) (\"NextSites\") } )) }",
        "AHop": "(sites (results from:#1 to:(sites To (hop (from (from)) Adjacent (between (exact #2) if:(< 0 (who at:(between)))) (to if:(is Empty (to))) )) (to)",
        "AStep": "(sites (results from:#1 to:(sites Around (from) if:(is Empty (to)) includeSelf:True) (to)",
        "Dist1": "(if (<= 1 (state at:(var \"LastTo\"))) (\"AStep\" (sites {(var \"LastTo\")})))",
        "Dist2": "(if (> 2 (state at:(var \"LastTo\"))) (\"Dist1\") (union (\"AStep\" \"Dist1\") (\"AHop\" (sites {(var \"LastTo\")}) 1)",
        "Dist3": "(if (> 3 (state at:(var \"LastTo\"))) (\"Dist2\") (union { (\"AStep\" \"Dist2\") (\"AHop\" \"Dist1\" 1) (\"AHop\" (sites {(var \"LastTo\")}) 2) }",
        "Dist4": "(if (> 4 (state at:(var \"LastTo\"))) (\"Dist3\") (union { (\"AStep\" \"Dist3\") (\"AHop\" \"Dist2\" 1) (\"AHop\" \"Dist1\" 2) (\"AHop\" (sites {(var \"LastTo\")}) 3) }",
        "Dist5": "(if (> 5 (state at:(var \"LastTo\"))) (\"Dist4\") (union { (\"AStep\" \"Dist4\") (\"AHop\" \"Dist3\" 1) (\"AHop\" \"Dist2\" 2) (\"AHop\" \"Dist1\" 3) (\"AHop\" (sites {(var \"LastTo\")}) 4) }",
        "Dist6": "(if (> 6 (state at:(var \"LastTo\"))) (\"Dist5\") (union { (\"AStep\" \"Dist5\") (\"AHop\" \"Dist4\" 1) (\"AHop\" \"Dist3\" 2) (\"AHop\" \"Dist2\" 3) (\"AHop\" \"Dist1\" 4) (\"AHop\" (sites {(var \"LastTo\")}) 5) }",
        "AllowedDestinations": "(if (> 7 (state at:(var \"LastTo\"))) (\"Dist6\") (union { (\"AStep\" \"Dist6\") (\"AHop\" \"Dist5\" 1) (\"AHop\" \"Dist4\" 2) (\"AHop\" \"Dist3\" 3) (\"AHop\" \"Dist2\" 4) (\"AHop\" \"Dist1\" 5) (\"AHop\" (sites {(var \"LastTo\")}) 6) }",
        "InfluenceOfAt": "(- (count Pieces of:#1 in:(sites Around (#2) includeSelf:True)) (count Pieces of:(- 3 #1) in:(sites Around (#2) includeSelf:True))",
        "OriginalAddException": "(or (= 1 (\"InfluenceOfAt\" (mover) (to))) (and (= 0 (\"InfluenceOfAt\" (mover) (to))) (= 0 (count Sites in:(difference (sites Around (to)) (sites Occupied by:All))))",
        "SimplifiedAddCondition": "(= 1 (\"InfluenceOfAt\" (mover) (to",
        "AddOnly": "(move Add (to (sites Empty) if:<Version:addCondition> ) (then (set Value Mover 0)",
        "Capture": "(forEach Site (sites Occupied by:Next) (if (le 2 (\"InfluenceOfAt\" (mover) (site))) (move Remove (site) (then (add (to (last From)) #1",
        "OriginalCaptureConsequenses": "(seq { (set Var \"LastTo\" (last To)) (set Value at:(var \"LastTo\") 1) (set Value Mover 0) (set State at:(var \"LastTo\") (max 0 (- (\"InfluenceOfAt\" (mover) (var \"LastTo\")) 4))) (forEach Site (difference (sites Occupied by:Mover) (sites {(var \"LastTo\")})) (set State at:(site) 0) ) (if (= 0 (state at:(var \"LastTo\"))) (\"Prepare4NextPhase\" #1 #2) (and (if (< \"SwitchLevel\" (state at:(var \"LastTo\"))) (\"FindDestinations\") ) (if (can Move \"CompleteTheMove\") (moveAgain) ))) }",
        "SimplifiedCaptureConsequences": "(seq { (set State at:(last To) 0) (\"Prepare4NextPhase\" #1 #2) }",
        "AddThenMove": "(move Add (to (sites Empty) if:(<= 2 (\"InfluenceOfAt\" (mover) (to))) (apply (set Var \"LastTo\" (to)) )) (then (seq { (set Value at:(var \"LastTo\") 1) (set Value Mover 0) (set State at:(var \"LastTo\") (- (\"InfluenceOfAt\" (mover) (var \"LastTo\")) 2)) (forEach Site (difference (sites Occupied by:Mover) (sites {(var \"LastTo\")})) (set State at:(site) 0) ) (and (if (< \"SwitchLevel\" (state at:(var \"LastTo\"))) (\"FindDestinations\") ) (if (can Move \"CompleteTheMove\") (moveAgain) )) }",
        "MoveFriendlyFar": "(do (seq { (set Var \"LastTo\" (from)) (\"FindDestinations\") } ) next:(move (from (var \"LastTo\")) (to (sites (values Remembered \"All\")) if:(!= (to) (from)))",
        "MoveFriendlyFast": "(do (set Var \"LastTo\" (from)) next:(move (from (var \"LastTo\")) (to (\"FastDestinations\") if:(!= (to) (from)))",
        "MoveFriendly": "(forEach Piece (if (!= 0 (state at:(from))) (if (< \"SwitchLevel\" (\"InfluenceOfAt\" (mover) (from))) (\"MoveFriendlyFar\") (\"MoveFriendlyFast\")",
        "CompleteTheMoveFar": "(move Add (to (sites (values Remembered \"All\")) (apply (seq { (set State at:(to) 0) (remove (var \"LastTo\")) } ))) #1",
        "CompleteTheMoveFast": "(move Add (to (\"FastDestinations\") (apply (seq { (set State at:(to) 0) (remove (var \"LastTo\")) } ))) #1",
        "CompleteTheMove": "(if (< \"SwitchLevel\" (state at:(var \"LastTo\"))) (\"CompleteTheMoveFar\" #1) (\"CompleteTheMoveFast\" #1)",
        "Prepare4NextPhase": "(seq { (#2) (forEach Site (sites Occupied by:(player (- 3 (next)))) (set State at:(site) 0) ) (forEach Site (sites Occupied by:(player (next))) (set State at:(site) (max 0 (\"InfluenceOfAt\" (next) (site)))) ) (set Value at:(var \"LastTo\") 0) (set Var \"MovePhase\" #1) (set Value Mover (+ 1 (value Player Mover))) (\"SetScores\" P1 P2) (\"SetScores\" P2 P1) (forget Value \"All\" All) (forget Value \"NNE_SSW\" All) (forget Value \"NNW_SSE\" All) (forget Value \"E_W\" All) }",
        "TheMove": "(if (= 0 (value Player Mover)) (\"CompleteTheMove\" (then (\"Prepare4NextPhase\" #1 #2))) (or { (\"AddThenMove\") (\"Capture\" (then <Version:captureConsequences>)) (or { (if (> 4 (value Player Mover)) (or (\"MoveFriendly\") (move Pass) )) (\"AddOnly\") } (then (\"Prepare4NextPhase\" #1 #2)) ) }",
        "FirstTurnPhase": "(phase \"FirstTurn\" (play (\"TheMove\" 1 (set NextPlayer (player (mover)))) ) (nextPhase (= 1 (var \"MovePhase\")) \"SecondTurn\")",
        "SecondTurnPhase": "(phase \"SecondTurn\" (play (\"TheMove\" 2 (set NextPlayer (player (next)))) ) (nextPhase (= 2 (var \"MovePhase\")) \"FirstTurn\")",
        "PiePhase": "(phase \"Pie\" (play (if (is Mover P1) (move Add (piece (+ 1 (% (+ 1 (counter)) 2))) (to (sites Empty)) stack:False (then (if (< 0 (counter)) (set NextPlayer (player (next))) (moveAgain) ))) (or (move Propose \"Accept Pie Offer and Move\" (then (set NextPlayer (player (mover)))) ) (move Propose \"Swap Pieces\" (then (do (forEach Site (sites Occupied by:P1) (remember Value (site)) ) next:(forEach Site (sites Occupied by:P2) (and (remove (site)) (add (piece \"Ball1\") (to (site)) stack:False) ) (then (forEach Value (values Remembered) (and (remove (value)) (add (piece \"Ball2\") (to (value)) stack:False) ) (then (set NextPlayer (player (next))) )))))))))) (nextPhase (or (is Proposed \"Swap Pieces\") (is Proposed \"Accept Pie Offer and Move\") ) \"FirstTurn\"",
        "IsEdge": "(> 5 (count Sites in:(sites Around #1",
        "SetScores": "(set Score #1 (+ (+ (+ (results from:(sites Occupied by:#1) to:(from) (if (\"IsEdge\" (from)) (if (or (< 0 (count Pieces #1 in:(sites Around (from)))) (< 2 (count Sites in:(sites Around (from) if:(is Empty (to))))) ) 1 0 ) (if (or (< 1 (count Pieces #1 in:(sites Around (from)))) (> 2 (- (count Pieces #2 in:(sites Around (from))) (count Pieces #1 in:(sites Around (from))) ))) 1 0 )))) (+ (results from:(sites Empty) to:(from) (if (\"IsEdge\" (from)) (if (and { (< 2 (count Pieces #1 in:(sites Around (from)))) (no Pieces #2 in:(sites Around (sites Around (from) if:(is Empty (to))))) (= 0 (count Sites in:(sites Around (from) if:(and (is Empty (to)) (\"IsEdge\" (to))))) ) } ) 1 0 ) (if (or (and (< 3 (count Pieces #1 in:(sites Around (from)))) (no Pieces #2 in:(sites Around (sites Around (from) if:(is Empty (to))))) ) (and (< 2 (count Pieces #1 in:(sites Around (from)))) (> 1 (count Pieces #2 in:(sites Around (from)))) )) 1 0 ))))) (+ (results from:(sites Occupied by:#2) to:(from) (if (< (+ 2 (count Sites in:(sites Around (from)))) (* 2 (count Pieces #1 in:(sites Around (from)))) ) 1 0",
        "StdPieceStart": "(start { (set Score P1 1) (set Score P2 2) (place \"Ball1\" <Board:startP1>) (place \"Ball2\" <Board:startP2>) }",
        "PieStart": "(start { (set Score P1 0) (set Score P2 0) }",
        "ThrongsBoard": "(board (remove (tri Hexagon 7) vertices:{2 3 4 15 23 24 33 57 69 70 71 80 81 82 83 91 92 93 94 101 102 103 111 112 115 116 119 120 121 122 123 124 125 126} ) use:Vertex",
        "RaggedHex63": "(board (remove (tri Limping 5 6) vertices:{0 1 5 6 29 30 39 48 64 70 71 74} ) use:Vertex",
        "RaggedHex87": "(board (trim (remove (tri Limping 6 7) vertices:{0 1 2 6 7 8 15 33 44 45 55 56 67 77 87 95 96 102 103 104 107} )) use:Vertex",
        "RaggedHex153": "(board (remove (tri {8 9 8 12 6}) vertices:{0 1 2 3 7 8 9 10 11 18 19 20 30 54 68 69 82 83 84 98 99 100 113 114 128 141 154 165 166 175 176 177 183 184 185 186 187 190 191} ) use:Vertex"
    },
    "game": "\"Throngs\" (players 2) (equipment { <Board:type> (piece \"Ball\" P1 maxState:7) (piece \"Ball\" P2 maxState:7) } ) (rules (meta (passEnd NoEnd)) <Variants:starting> phases:{ <Variants:pieOrNot> \"FirstTurnPhase\" \"SecondTurnPhase\" } (end (if (or (all Passed) (< (count Sites in:(sites Board)) (- (* 2 (score Next)) (\"SafetyFigure\")) )) (byScore) ))) ) (define \"SafetyFigure\" 2",
    "option": {},
    "rulesets": {},
    "metadata": {}
}