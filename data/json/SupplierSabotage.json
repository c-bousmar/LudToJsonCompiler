{
    "define": {
        "IsSupplierAt": "(and (not (is Empty #1)) (not (\"IsWarehouseAt\" #1)) )",
        "IsWarehouseAt": "(is Pattern <Board:pattern1> from:#1)",
        "AllWarehousesOf": "(forEach (sites Occupied by:#1) if:(\"IsWarehouseAt\" (site)) )",
        "ChainAt": "(sites Group at:#1 <Grid:dirChains>)",
        "SuppliersAroundChainAt": "(sites Around (\"ChainAt\" #1) <Grid:dirChains> if:(\"IsSupplierAt\" (to)) )",
        "WarehousesinChainAt": "(forEach (\"ChainAt\" #1) if:(\"IsWarehouseAt\" (site)) )",
        "IsDeficitInChainAt": "(< (size Array (array (\"SuppliersAroundChainAt\" #1))) (size Array (array (\"WarehousesinChainAt\" #1))) )",
        "DeficitWarehousesOf": "(forEach (sites Occupied by:#1) if:(and (\"IsWarehouseAt\" (site)) (\"IsDeficitInChainAt\" (site)) ))",
        "SurplusGoodsChainAt": "(- (size Array (array (\"SuppliersAroundChainAt\" #1))) (size Array (array (\"WarehousesinChainAt\" #1))) )",
        "UpdateSurplusesToDisplayFor": "(forEach Value (array (sites Occupied by:#1)) (set Value at:(value) (max 0 (\"SurplusGoodsChainAt\" (value)))) )",
        "Score": "(and (\"ScoreFor\" P1) (\"ScoreFor\" P2))",
        "ScoreFor": "(set Score #1 (size Array (array (\"AllWarehousesOf\" #1))))"
    },
    "game": "\"SupplierSabotage\" (players 2) (equipment { <Board:used> (piece \"Barn\" Each) } ) (rules (play (if (\"NewTurn\") (or { (move Add (to (sites Empty) if:(!= (to) (value Player Mover)) )) (move Pass) } ) (priority (move Select (from (\"DeficitWarehousesOf\" Mover)) (then (remove (last From) (then (set Value Mover (last To))) ))) (move Select (from (\"DeficitWarehousesOf\" Next)) (then (remove (last From)) ))) (then (and { (\"UpdateSurplusesToDisplayFor\" Mover) (\"UpdateSurplusesToDisplayFor\" Next) (\"Score\") } (then (if (< 0 (count Sites in:(\"DeficitWarehousesOf\" All))) (moveAgain) ) ) )))) (end { (if (and { (or (all Passed) (no Moves Mover)) (no Pieces in: (\"DeficitWarehousesOf\" All)) (= (score P1) (score P2)) } ) (byScore {(score P1 (count Pieces P1)) (score P2 (count Pieces P2))}) ) (if (and { (or (all Passed) (no Moves Mover)) (no Pieces in: (\"DeficitWarehousesOf\" All)) (!= (score P1) (score P2)) } ) (byScore) ) }",
    "option": {
        "Board": {
            "arguments": "<used> <warehouse> <pattern1>",
            "items": {
                "Hex 2,3 (12)": {
                    "content": "(board (hex 2 3) use:Cell)> <\"Hex.svg\"> <(\"HexPattern\")",
                    "description": "Hex 2,3"
                },
                "Hex Triangle 5 (15)": {
                    "content": "(board (hex Triangle 5) use:Cell)> <\"Hex.svg\"> <(\"HexPattern\")",
                    "description": "Hex 2,3"
                },
                "Hex 3 (19)": {
                    "content": "(board (hex 3) use:Cell)> <\"Hex.svg\"> <(\"HexPattern\")",
                    "description": "Hex 3"
                },
                "Hex 3,4 (27)": {
                    "content": "(board (hex 3 4) use:Cell)> <\"Hex.svg\"> <(\"HexPattern\")",
                    "description": "Hex 3,4"
                },
                "Hex 3,5 (36)": {
                    "content": "(board (hex 3 5) use:Cell)> <\"Hex.svg\"> <(\"HexPattern\")",
                    "description": "Hex 3,5"
                },
                "Hex 4,5 (48)": {
                    "content": "(board (hex 4 5) use:Cell)> <\"Hex.svg\"> <(\"HexPattern\")",
                    "description": "Hex 4,5"
                },
                "Hex 4,6 (60)": {
                    "content": "(board (hex 5 6) use:Cell)> <\"Hex.svg\"> <(\"HexPattern\")",
                    "description": "Hex 5,6"
                },
                "Hex 6,7 (108)": {
                    "content": "(board (hex 6 7) use:Cell)> <\"Hex.svg\"> <(\"HexPattern\")",
                    "description": "Hex 6,7"
                },
                "Hex 6,8 (126)": {
                    "content": "(board (hex 6 8) use:Cell)> <\"Hex.svg\"> <(\"HexPattern\")",
                    "description": "Hex 6,8"
                },
                "Square 5 (25) 1": {
                    "content": "(board (square 5) use:Cell)> <\"Square.svg\"> <(\"SquarePattern1\")",
                    "description": "Square 5"
                },
                "Square 7 (49) 2": {
                    "content": "(board (square 7) use:Cell)> <\"Square.svg\"> <(\"SquarePattern1\")",
                    "description": "Square 7"
                },
                "Square 9 (81) 3": {
                    "content": "(board (square 9) use:Cell)> <\"Square.svg\"> <(\"SquarePattern1\")",
                    "description": "Square 9"
                }
            }
        },
        "Connectivity": {
            "arguments": "<dirWarehouse> <dirChains>",
            "items": {}
        }
    },
    "rulesets": {},
    "metadata": "(info { (description \"'Supplier Sabotage' is a variant of 'Supply Chains' which originated as a search for alternative liberty and life concepts, taking a body-foot concept from 'Polypods' and 'Mutant Y'. Placements mutate one's pieces (from 'Suppliers' to scoring 'Warehouses' based on a triangle pattern rather than the friendly neighborhood density. Each player's ability to retain Warehouses relies on their opponent's Supplier pieces. This also constrains the sites that can be used for expansion in an area, and potentially forces removals of unsupported Warehouses in the opponent's neighboring chains. in this variant self-suicide is allowed, and can be used to create undersupply to the opponent's warehouses - and the mover determines which warehouses to remove, making attacks more effective. Passing is allowed and can be tactically advantageous. Cycles are reduced, or perhaps eliminated, by preventing placement on the same location on a player's own consecutive turns. The game ends with consecutive passes, ties resolved by piece count. \") (rules \"The goal is to have the most 'Warehouses' when the board is full. Definitions: -- 'friend': a player's piece. -- 'foreign': an opponent's piece. -- A 'Warehouse' is a piece that is part of a triangle of adjacent friendlies. -- A 'Supplier' is any piece other than a warehouse. -- A 'Supply Chain' is any friendly, its friendly neighbors, their neighbors, and so on. (see options). -- A 'Supply Chain Deficit' is a condition that occurs when the number of Warehouses in a Supply Chain is more than the number of foreign Suppliers orthogonally next to that Chain. Play: On your turn, you may pass. Otherwise, a turn can have 3 phases in the following order: 1) Place a friend on an empty space. -- If the placement does not cause any friends to become warehouses, then the turn is over. 2) If the Supply Chain where you placed has a Deficit, remove one friendly warehouse at a time, until you have no Deficits in any friendly Supply Chain. 3) If any foreign Supply Chain now has a Deficit, remove one foreign warehouse at a time, until there are no Deficits left on the board. Restrictions: -- If you removed any of your friendly warehouses on your previous turn, you may not place a friend on the last space where the friend was removed. -- It is important that phase 3 must always wait until phase 2 is complete. The game ends when both players pass consecutively. The player with more warehouses wins, and if the count is the same, then the player with the most suppliers wins.\") (id \"4207\") (version \"1.3.14\") (classification \"board/space/territory\") (author \"Dale W. Walton\") (credit \"Dale W. Walton\") (date \"10-09-2023\") } ) (graphics { (player Colour P1 (colour 120 36 0)) (player Colour P2 (colour Cream)) (piece Scale \"Barn\" .06) (board StyleThickness InnerEdges 0.4) (board StyleThickness OuterEdges 0.7) (board StyleThickness InnerVertices 0.45) (board StyleThickness OuterVertices 0.45) (board Colour InnerVertices (colour Grey)) (board Colour OuterVertices (colour Grey)) (board Colour InnerEdges (colour Black)) (board Colour OuterEdges (colour Black)) (board Background fillColour:(colour 170 160 140) edgeColour:(colour Grey) scale:1.3 ) (board Colour Phase0 (colour 150 190 120)) (show Symbol \"Hex\" (\"DeficitWarehousesOf\" All) fillColour:(colour LightRed) scaleY:1.03) (show Symbol \"Hex\" (difference (\"AllWarehousesOf\" All) (\"DeficitWarehousesOf\" All)) fillColour:(colour Grey) scaleY:1.03) (show Symbol \"Base\" (intersection (sites Occupied by:P1) (\"AllWarehousesOf\" All)) fillColour:(colour 120 36 0) scale:.7 ) (show Symbol \"Base\" (intersection (sites Occupied by:P2) (\"AllWarehousesOf\" All)) fillColour:(colour Cream) scale:.7 ) (show Symbol \"Barn\" (difference (sites Occupied by:P1) (\"AllWarehousesOf\" All)) fillColour:(colour 120 36 0) scale:.6 ) (show Symbol \"Barn\" (difference (sites Occupied by:P2) (\"AllWarehousesOf\" All)) fillColour:(colour Cream) scale:.6 ) } )"
}