{
    "define": {
        "ArchwormMove": "(or { (move (from (sites Occupied by:Mover) if:(is In (from) (sites Board))) (to (sites Around (from) <Board:directions> if:(is Empty (to)))) ) (if (not (is Empty (handSite Mover))) (move Select (from (sites Board) if:(is Empty (to))) (then (fromTo (from (handSite Mover)) (to (last To)) ))) ) (move (from (sites Occupied by:Mover) if:(is In (from) (sites Board))) (to (handSite Mover)) ) } (then (and (<Board:wormVariant> Mover) (if (and { <Alternation:variant> \"NewTurn\" (!= -1 (counter)) } ) (moveAgain)",
        "ScoreWormsOf": "(set Score #1 (^ (+ (results from:(forEach (sites Occupied by:#1) if:(is Pattern {F R F R F R} Cell from:(site)) ) to:(forEach (sites {(from)}) if:(no Pieces Mover in:(sites Around (sites Pattern {F R F R F R} Cell from:(site)) <Board:directions>) )) 1 )) 2",
        "ScoreRestrictedWormsOf": "(set Score #1 (^ (+ (results from:(forEach (sites Occupied by:#1) if:(and { (= 1 (count Pieces #1 in:(sites Around (site) Orthogonal))) (or { (= 1 (count Pieces #1 in:(intersection (sites Direction from:(site) N distance:1) (sites Around (site) Orthogonal) ))) (= 1 (count Pieces #1 in:(intersection (sites Direction from:(site) E distance:1) (sites Around (site) Orthogonal) ))) (= 1 (count Pieces #1 in:(intersection (sites Direction from:(site) W distance:1) (sites Around (site) Orthogonal) ))) (= 1 (count Pieces #1 in:(intersection (sites Direction from:(site) S distance:1) (sites Around (site) Orthogonal) ))) } ) (or (is Pattern {F R F R F } Cell from:(site)) (is Pattern {F L F L F } Cell from:(site)) ) (no Pieces #1 in:(sites Around (sites Pattern {F R F R F } Cell from:(site)) Orthogonal) ) (no Pieces #1 in:(sites Around (sites Pattern {F L F L F } Cell from:(site)) Orthogonal) ) } )) to:(from) 1 )) 2 )",
        "ScoreDiagonalEndedWormsOf": "(set Score #1 0 (then (forEach Group Adjacent if:(and (is #1 (who at:(to))) (= 1 (count Pieces #1 in:(sites Around (to) Diagonal))) ) (if (and { (= 4 (size Array (array (sites)))) (no Pieces #1 in:(sites Around (sites) Adjacent)) (or (= 1 (size Array (array (intersection (sites) (sites Around (regionSite (sites) index:0) distance:3 Orthogonal) )))) (= 1 (size Array (array (intersection (sites) (sites Around (regionSite (sites) index:3) distance:3 Orthogonal) ))))) } ) (addScore #1 1) ) (then (set Score #1 (^ (score #1) 2)))",
        "SymRemover": "(renumber (rotate (* (- #1 1) (/ 360 #1)) (trim (remove #2 #3",
        "RaggedTri": "(\"SymRemover\" 1 (\"SymRemover\" 3 (\"SymRemover\" 3 #1 #2) #2) #3",
        "ColourBackground": "(colour 146 175 126",
        "ColourBackground2": "(colour 166 215 146"
    },
    "game": "\"Archworm\" (players 2) (equipment { <Board:used> (hand Each size:1) (piece \"Ball\" Each) } ) (rules (start { (set Score Each 0) (place Stack \"Ball1\" Cell (handSite 1) count:13) (place Stack \"Ball2\" Cell (handSite 2) count:13) } ) (play (\"ArchwormMove\") ) (end (if (= <Winning:count> (score Mover) ) (result Mover Win)",
    "option": {},
    "rulesets": {},
    "metadata": {}
}