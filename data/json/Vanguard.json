{
    "define": {
        "CanGo": "(and (not (\"IsFriendAt\" (#1))) (not (or (= (what at:(#1)) (id \"Goat1\")) (= (what at:(#1)) (id \"Goat2\")))))",
        "RTake": "(and (\"IsEnemyAt\" (#1)) (not (or (= (what at:(#1)) (id \"Goat1\")) (= (what at:(#1)) (id \"Goat2\")))))",
        "Rk": "(where: \"Goat\" Mover)",
        "Friendly": "(or { (\"IsPieceAt\" \"Knight\" Mover #1) (\"IsPieceAt\" \"Prince\" Mover #1) (\"IsPieceAt\" \"Flag\" Mover #1) })",
        "TaCon": "(move Step #2 (to if:(and { (\"RTake\" to) (is In (from) (sites #1)) (\"Friendly\" (ahead (from) #3)) })))",
        "EmCon": "(move Step #2 (to if:(and { (is Empty (to)) (is In (from) (sites #1)) (\"Friendly\" (ahead (from) #3)) }))(then (and (set Var \"MLeft\" 2) (add (piece (id \"Dot\" Mover))(to (last From)) (then \"NextS\")))))",
        "SCheck": "(or (fromTo (from \"Rk\") (to (ahead \"Rk\" #2) if:(and { (\"RTake\" to) (is In (from) (sites #1)) (\"IsPieceAt\" \"Dot\" Mover (ahead (from) #3)) })) (then (set Var \"MLeft\" 0))) (fromTo (from \"Rk\") (to (ahead \"Rk\" #2) if:(and { (is Empty (to)) (is In (from) (sites #1)) (\"IsPieceAt\" \"Dot\" Mover (ahead (from) #3)) })) (then ((add (piece (id \"Dot\" Mover)) (to (last To)))))))",
        "NextS": "(and { (while:(> (var \"MLeft\") 0) (and (set Var \"MLeft\" (add (var \"MLeft\") -1)) (or { (\"SCheck\" Board E W) (\"SCheck\" Board W E) (\"SCheck\" Board NNE SSW) (\"SCheck\" Board SSW NNE) (\"SCheck\" Board SSE NNW) (\"SCheck\" Board NNW SSE) (\"SCheck\" \"OutE\" NNW SSW) (\"SCheck\" \"OutE\" SSW NNW) (\"SCheck\" \"OutW\" NNE SSE) (\"SCheck\" \"OutW\" SSE NNE) (and (\"SCheck\" \"OutS\" NNE NNW) (remove (sites Occupied by:Mover component:\"Dot\"))) (and (\"SCheck\" \"OutS\" NNW NNE) (remove (sites Occupied by:Mover component:\"Dot\"))) (and (\"SCheck\" \"OutN\" SSE SSW) (remove (sites Occupied by:Mover component:\"Dot\"))) (and (\"SCheck\" \"OutN\" SSW NNE) (remove (sites Occupied by:Mover component:\"Dot\"))) }))) (remove (sites Occupied by:Mover component:\"Dot\") (then (remove (sites Occupied by:Mover component:\"Dot\")))) })"
    },
    "game": "\"Vanguard\" (players 2) (equipment { (board (remove (hex Rectangle 8 6) cells:{5 16 27 38} ) ) (regions \"FullW\" Shared {0 5 10 15 20 25 30 35}) (regions \"FullE\" Shared {4 9 14 19 24 29 34 39}) (regions \"OutS\" Shared {1 2 3}) (regions \"OutN\" Shared {36 37 38}) (regions \"OutW\" Shared {10 20 30}) (regions \"OutE\" Shared {9 19 29}) (regions \"CorNW\" Shared {35}) (regions \"CorNE\" Shared {39}) (regions \"CorSW\" Shared {0}) (regions \"CorSE\" Shared {4}) (piece \"Flag\" Each) (piece \"Knight\" Each (move Step All (to if:(\"CanGo\" to)))) (piece \"Prince\" Each(move Step (to if:(not (\"IsFriendAt\" (to)))) (then (fromTo (from (sites Occupied by:Mover component:\"Flag\")) (to (last From)))))) (piece \"Dot\" Each) (piece \"Goat\" Each (or { (move Step (to if:(and (\"RTake\" to) (\"Friendly\" (ahead (from) OppositeDirection))))) (\"TaCon\" \"OutE\" NNW SSW) (\"TaCon\" \"OutE\" SSW NNW) (\"TaCon\" \"OutW\" NNE SSE) (\"TaCon\" \"OutW\" SSE NNE) (\"TaCon\" \"OutS\" NNE NNW) (\"TaCon\" \"OutS\" NNW NNE) (\"TaCon\" \"OutN\" SSE SSW) (\"TaCon\" \"OutN\" SSW SSE) (\"TaCon\" \"OutN\" SSW SSE) (\"TaCon\" \"CorNW\" SSW E) (\"TaCon\" \"CorNW\" E SSW) (\"TaCon\" \"CorNE\" W SSW) (\"TaCon\" \"CorNE\" SSW W) (\"TaCon\" \"CorSE\" NNE W) (\"TaCon\" \"CorSE\" W NNE) (\"TaCon\" \"CorSW\" E NNE) (\"TaCon\" \"CorSW\" NNE E) (move Step (to if:(and (is Empty (to)) (\"Friendly\" (ahead (from) OppositeDirection)))) (then (and (set Var \"MLeft\" 2) (add (piece (id \"Dot\" Mover)) (to (last From)) (then \"NextS\")) ))) (\"EmCon\" \"OutE\" NNW SSW) (\"EmCon\" \"OutE\" SSW NNW) (\"EmCon\" \"OutW\" NNE SSE) (\"EmCon\" \"OutW\" SSE NNE) (\"EmCon\" \"OutS\" NNE NNW) (\"EmCon\" \"OutS\" NNW NNE) (\"EmCon\" \"OutN\" SSE SSW) (\"EmCon\" \"OutN\" SSW SSE) (\"EmCon\" \"OutN\" SSW SSE) (\"EmCon\" \"CorNW\" SSW E) (\"EmCon\" \"CorNW\" E SSW) (\"EmCon\" \"CorNE\" W SSW) (\"EmCon\" \"CorNE\" SSW W) (\"EmCon\" \"CorSE\" NNE W) (\"EmCon\" \"CorSE\" W NNE) (\"EmCon\" \"CorSW\" E NNE) })) }) (rules (start { (place \"Knight1\" {3 6 7}) (place \"Prince1\" 1) (place \"Flag1\" {2}) (place \"Goat1\" 8) (place \"Knight2\" {32 33 36}) (place \"Prince2\" 38) (place \"Flag2\" 37) (place \"Goat2\" 31) }) (play (forEach Piece)) (end { (forEach Player if: (\"IsOffBoard\" (where \"Flag\" Next)) (result Mover Win)) (if: (no Moves Mover) (result Mover Loss)) }) )",
    "option": {},
    "rulesets": {},
    "metadata": "(info { (description \"Played on an 8 by 5 rectangular board with hexagonal cells.\") (rules \"Played on an 8 by 5 rectangular board with hexagonal cells. Each player starts with 3 outriders, 1 ram, 1 captain, and 1 flag. Capture by moving onto an opponent's piece. Only the captain can capture an opponent's ram. -Outriders move 1 space orthogonally or diagonally. -The captain moves one space orthogonally. When a player moves their captain, their flag automatically moves onto the space their captain last occupied; this counts as one move. -The ram moves 3 spaces in a straight line orthogonally in the opposite direction of an adjacent friendly piece. The ram stops if it captures an enemy piece, is blocked by a friendly piece or opponent's ram, enters a corner space, or enters an edge space while moving directly east or west. If the ram enters an edge space while moving northwards/southwards and has moved less than 3 spaces, it 'bounces' by changing direction to the other remaining northwards/southwards direction that does not lead off the board. Likewise, the same rule applies if the ram initiates a move while occupying an edge space with an adjacent friendly piece to the north or south. If a player captures the opponent's flag, they win. If a player has no legal moves, they lose.\") (id \"4241\") (version \"1.3.14\") (classification \"board/war/replacement/eliminate/target\") (author \"K. M. Lewis\") (credit \"K. M. Lewis\") (date \"28-10-2024\") } )"
}