{
    "define": {
        "IfThisRotationDo": "(if (= 0 (size Array (difference (results from:(sites Group at:#4) to:(from) (+ (+ (* 32 #1) (#2)) (+ (max (results from:(sites Group at:#4) to:(from) (- (* 32 #1)) ) ) (max (results from:(sites Group at:#4) to:(from) (- (#2)) ) ) ) ) ) (results from:(sites) to:(from) (value Piece at:(from)) ) ) ) ) #3 )",
        "DRow": "(/ (value Piece at:(from)) 32",
        "DCol": "(% (value Piece at:(from)) 32",
        "IsSameSizeAsShapeAtValue": "(= (size Array (array (sites))) (size Array (array (sites Group at:#1))))",
        "IfShapessMatchDo": "(if (\"IsSameSizeAsShapeAtValue\" #2) (priority { (\"IfThisRotationDo\" (\"DRow\") (\"DCol\") #1 #2) (\"IfThisRotationDo\" (\"DRow\") (- \"DRow\" \"DCol\") #1 #2) (\"IfThisRotationDo\" (- \"DRow\" \"DCol\") (\"DRow\") #1 #2) (\"IfThisRotationDo\" (\"DCol\") (\"DRow\") #1 #2) (\"IfThisRotationDo\" (- \"DCol\") (- \"DRow\" \"DCol\") #1 #2) (\"IfThisRotationDo\" (- \"DCol\" \"DRow\") (\"DCol\") #1 #2) (\"IfThisRotationDo\" (- \"DRow\") (- \"DCol\") #1 #2) (\"IfThisRotationDo\" (- \"DRow\") (- \"DCol\" \"DRow\") #1 #2) (\"IfThisRotationDo\" (- \"DCol\" \"DRow\") (- \"DRow\") #1 #2) (\"IfThisRotationDo\" (- \"DCol\") (- \"DRow\") #1 #2) (\"IfThisRotationDo\" (\"DCol\") (- \"DCol\" \"DRow\") #1 #2) (\"IfThisRotationDo\" (- \"DRow\" \"DCol\") (- \"DCol\") #1 #2) } ) )",
        "RecordShapeVectorsAsValues": "(set Var \"LastRow\" (row of:(max (array (sites Group at:(last To))))) (then (set Var \"LastCol\" (max (results from:(sites Group at:(last To)) to:(from) (column of:(from)))) (then (forEach Site (sites Group at:(last To)) (set Value at:(site) (+ (* 32 (- (var \"LastRow\") (row of:(site)))) (- (var \"LastCol\") (column of:(site))) ) ) ) ) ) ) )",
        "GroupSize": "(size Group at:(var \"KeySite\"))",
        "BroodSize": "(count Value (var \"KeySite\") in:(values Remembered \"ShapeCount\"))",
        "RecordMultiplier": "(forEach Site (sites Group at:(var \"KeySite\")) (set State at:(site) (min (\"BroodSize\") (\"GroupSize\"))) )",
        "CountShapesOf": "(forEach Value (values Remembered) (and { (set Var \"KeySite\" (value) (then (forEach Group if:(= #1 (who at:(to))) (\"IfShapessMatchDo\" (remember Value \"ShapeCount\" (var \"KeySite\") ) (var \"KeySite\") ) ) ) ) } (then (\"RecordMultiplier\")) ) (then (forget Value All)) )",
        "ScorePlayer": "(forEach Group if:(= #1 (who at:(to))) (remember Value (regionSite (sites) index:0) unique:True) (then (and { (\"CountShapesOf\" #1) (set Score Mover 0 (then (forEach Piece (addScore Mover (state at:(from)))) ) ) } ) ) )",
        "PlaceHex": "(do (forEach Site (sites Occupied by:Mover) (set State at:(site) 0) ) next:(move Add (piece (id \"Hex\" Mover)) (to (sites Empty)) (then (\"RecordShapeVectorsAsValues\")) ) (then (\"ScorePlayer\" (mover))) )"
    },
    "game": "\"Brood\" (players 2) (equipment { (board <Board:size> use:Cell) (piece \"Hex\" Each maxState:7 maxValue:1023) (piece \"Disc\" Neutral) (hand Shared) }) (rules <Protocol:pie> <Protocol:setup> (play <Protocol:protocol> ) (end (if <Protocol:endCondition> (byScore) ) ) )",
    "option": {
        "Board Size": {
            "arguments": "<size>",
            "items": {
                "4": {
                    "content": "(hex Hexagon 4)",
                    "description": "A board of size 4 is currently selected."
                },
                "5": {
                    "content": "(hex Hexagon 5)",
                    "description": "A board of size 5 is currently selected."
                },
                "6": {
                    "content": "(hex Hexagon 6)",
                    "description": "A board of size 6 is currently selected."
                },
                "7": {
                    "content": "(hex Hexagon 7)",
                    "description": "A board of size 7 is currently selected."
                },
                "8": {
                    "content": "(hex Hexagon 8)",
                    "description": "A board of size 8 is currently selected."
                },
                "9": {
                    "content": "(hex Hexagon 9)",
                    "description": "A board of size 9 is currently selected."
                }
            }
        },
        "Piece Values": {
            "arguments": "<values>",
            "items": {
                "Hide": {
                    "content": "",
                    "description": "Nothing is currently printed on the pieces."
                },
                "Show": {
                    "content": "(show Piece State \"Hex\" Middle)",
                    "description": "Each piece currently shows the lesser of its brood's order and its brood's size."
                }
            }
        },
        "Placement Protocol": {
            "arguments": "<pie> <setup> <protocol> <endCondition>",
            "items": {}
        }
    },
    "rulesets": {},
    "metadata": "(info { (description \"Brood is a polyhex-matching game for two players \u2013 Black and White \u2013 played on an initially empty hexhex board. Michael Amundsen invented Brood in May 2022.\") (rules \"Definitions: 1 A group is a stone along with all stones one can reach from it through a series of steps onto adjacent stones of the same color. 1.1 The size of a group is the number of stones in it. 2 A brood is a group along with all other groups of identical color, size and shape. Shapes are considered identical across symmetries (just like in Bug). 2.1 The size of a brood is the number of groups in it. 2.2 The order of a brood is the size of the groups in it. 2.3 The mass of a brood is the number of stones in it (its size times its order). Play: On the very first turn of the game, Black places one stone of their colour on any hex. After, that \u2013 starting with White \u2013 take turns doing one of the following: - Pass. - Place two stones of your colour on empty hexes. When the players pass consecutively, the winner is the player with the higher score. Scoring: For each of your broods, you score its mass multiplied by the lesser of its size and its order. For example, if a brood consists of 2 groups of size 3, it is worth 12 points. Its order is 3, its size is 2 and its mass is 6. Since 2 is smaller than 3, the brood is worth 6*2 = 12.\") (id \"1998\") (version \"1.3.14\") (classification \"board/space/group\") (author \"Michael Amundsen\") (credit \"Dale Walton\") (date \"2022\") } ) (graphics { (board Colour Phase0 (colour 100 200 250 120)) (board Colour OuterEdges (colour Black)) (board Colour InnerEdges (colour Black)) (board StyleThickness OuterEdges 1.5) (board StyleThickness InnerEdges 0.4) (board StyleThickness InnerVertices 0.4) (board StyleThickness OuterVertices 0.4) (player Colour P1 (colour Black)) (player Colour P2 (colour Cream)) (player Colour Neutral (colour 72 144 160 190)) (piece Scale Neutral .6) <Graphics:values> } ) (ai \"Brood_ai\" )"
}