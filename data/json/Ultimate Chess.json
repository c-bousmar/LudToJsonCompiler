{
    "define": {
        "KingInTheInitialPlace": "(= (what at:(mapEntry \"King\" (mover))) (id \"King\" Mover))",
        "HasNeverMoved": "(= (state at:(mapEntry #1 (mover))) 1)",
        "PieceHasMoved": "(set State at:(last To) 0)",
        "RememberPieceHasMoved": "(then (if (= (state at:(last To)) 1) \"PieceHasMoved\" ) )",
        "KingNotCheckedAndToEmpty": "(and (is Empty (to)) (not (\"IsInCheck\" \"King\" Mover at:(to))) )",
        "DoCastle": "(move Slide (from (mapEntry #1 (mover))) #2 (between (exact #3) if:#4 ) #5 )",
        "RightCastling": "(\"DoCastle\" \"King\" E 2 \"KingNotCheckedAndToEmpty\" (then (and (\"PieceHasMoved\") (\"DoCastle\" \"RookRight\" W 3 True))))",
        "LeftCastling": "(\"DoCastle\" \"King\" W 2 \"KingNotCheckedAndToEmpty\" (then (and (\"PieceHasMoved\") (\"DoCastle\" \"RookLeft\" E 3 True))))",
        "SetEnPassantLocation": "(then (set Var (last To)))",
        "InitialPawnMove": "(forEach Value min:2 max:3 (move Slide Forward (between (exact (value)) if:(is Empty (between)) (apply (set Pending (between))) ) (to if:(is Empty (to))) \"SetEnPassantLocation\" ) )",
        "InLocationEnPassant": "(is In (to) (sites Pending))",
        "LastPawnMoved": "(var)",
        "EnPassant": "(move Step (directions {FR FL}) (to if:\"InLocationEnPassant\") (then (remove (\"LastPawnMoved\"))) )",
        "PawnMove": "(or { (if (is In (from) (sites Start (piece (what at:(from))))) \"InitialPawnMove\" ) \"StepForwardToEmpty\" (\"StepToEnemy\" (directions {FR FL})) \"EnPassant\" } (then (and (\"ReplayInMovingOn\" (sites Mover \"Promotion\")) (set Counter) ) ) )",
        "RookMove": "(\"SlideCapture\" ~ Orthogonal (then (set Counter)) \"RememberPieceHasMoved\")",
        "KingMove": "(move Step (to if:(not (\"IsFriendAt\" (to))) (apply (if (\"IsEnemyAt\" (to)) (remove (to) (then (set Counter)) ) ) ) ) \"RememberPieceHasMoved\" )",
        "BishopMove": "(\"SlideCapture\" ~ Diagonal (then (set Counter)))",
        "KnightMove": "(\"LeapCapture\" \"KnightWalk\" (then (set Counter)))",
        "QueenMove": "(\"SlideCapture\" ~ ~ (then (set Counter)))",
        "RowSquareSection": "(% (row of:(last To)) 3)",
        "MinRow": "(* \"RowSquareSection\" 3)",
        "MaxRow": "(+ (\"MinRow\") 2)",
        "ColumnSquareSection": "(% (column of:(last To)) 3)",
        "MinColumn": "(* \"ColumnSquareSection\" 3)",
        "MaxColumn": "(+ (\"MinColumn\") 2)",
        "RightSection": "(and { (<= (column of:(from)) (\"MaxColumn\")) (>= (column of:(from)) (\"MinColumn\")) (<= (row of:(from)) (\"MaxRow\")) (>= (row of:(from)) (\"MinRow\")) })"
    },
    "game": "\"Ultimate Chess\" (\"TwoPlayersNorthSouth\") (equipment { (board (square 9)) (piece \"Pawn\" Each (\"PawnMove\")) (\"ChessRook\" \"Rook\" (then (set Counter)) (\"RememberPieceHasMoved\")) (\"ChessKing\" \"King\" (then (set Counter)) (\"RememberPieceHasMoved\")) (\"ChessBishop\" \"Bishop\" (then (set Counter))) (\"ChessKnight\" \"Knight\" (then (set Counter))) (\"ChessQueen\" \"Queen\" (then (set Counter))) (map \"King\" {(pair 1 \"E1\") (pair 2 \"E9\")}) (map \"RookLeft\" {(pair 1 \"A1\") (pair 2 \"A9\")}) (map \"RookRight\" {(pair 1 \"I1\") (pair 2 \"I9\")}) (regions \"Promotion\" P1 (sites Top)) (regions \"Promotion\" P2 (sites Bottom)) }) (rules (start { (place \"Pawn1\" (sites Row 1)) (place \"Pawn2\" (sites Row 7)) (place \"Rook1\" {\"A1\" \"I1\"} state:1) (place \"Knight1\" {\"B1\" \"H1\"}) (place \"Bishop1\" {\"C1\" \"G1\"}) (place \"Queen1\" {\"D1\" \"F1\"}) (place \"King1\" coord:\"E1\" state:1) (place \"Rook2\" {\"A9\" \"I9\"} state:1) (place \"Knight2\" {\"B9\" \"H9\"}) (place \"Bishop2\" {\"C9\" \"G9\"}) (place \"Queen2\" {\"D9\" \"F9\"}) (place \"King2\" coord:\"E9\" state:1) }) (play (if \"SameTurn\" (move Promote (last To) (piece {\"Queen\" \"Knight\" \"Bishop\" \"Rook\"}) Mover) (priority { (if (!= 0 (count Moves)) (do (or { (forEach Piece \"Queen\" (if (\"RightSection\") (\"QueenMove\") ) ) (forEach Piece \"Knight\" (if (\"RightSection\") (\"KnightMove\") ) ) (forEach Piece \"Bishop\" (if (\"RightSection\") (\"BishopMove\") ) ) (forEach Piece \"King\" (if (\"RightSection\") (\"KingMove\") ) ) (forEach Piece \"Rook\" (if (\"RightSection\") (\"RookMove\") ) ) (forEach Piece \"Pawn\" (if (\"RightSection\") (\"PawnMove\") ) ) (if (and (= \"RowSquareSection\" 0) (= \"ColumnSquareSection\" 1)) (if (and { \"KingInTheInitialPlace\" (\"HasNeverMoved\" \"King\") (not (\"IsInCheck\" \"King\" Mover)) }) (or (if (and (\"HasNeverMoved\" \"RookLeft\") (can Move (\"DoCastle\" \"RookLeft\" E 3 (is Empty (to)))) ) \"LeftCastling\" ) (if (and (\"HasNeverMoved\" \"RookRight\") (can Move (\"DoCastle\" \"RookRight\" W 2 (is Empty (to)))) ) \"RightCastling\" ) ) ) ) }) ifAfterwards:(not (\"IsInCheck\" \"King\" Mover (forEach Piece))) ) ) (do (or (forEach Piece) (if (and { \"KingInTheInitialPlace\" (\"HasNeverMoved\" \"King\") (not (\"IsInCheck\" \"King\" Mover)) }) (or (if (and (\"HasNeverMoved\" \"RookLeft\") (can Move (\"DoCastle\" \"RookLeft\" E 3 (is Empty (to)))) ) \"LeftCastling\" ) (if (and (\"HasNeverMoved\" \"RookRight\") (can Move (\"DoCastle\" \"RookRight\" W 3 (is Empty (to)))) ) \"RightCastling\" ) ) ) ) ifAfterwards:(not (\"IsInCheck\" \"King\" Mover)) ) }) ) ) (end { (\"Checkmate\" \"King\") (if (or (no Moves Mover) (= (counter) 100)) (result Mover Draw)) }) )",
    "option": {},
    "rulesets": {},
    "metadata": "(info { (description \"Ultimate Chess is a variant of Chess.\") (rules \"Ultimate Chess is a variant of Chess played on a 9x9 Sudoku checkerboard as shown, with same rules as Chess except: - Pawns can move 2 or 3 steps forward in their first move. The pawn can be captured by En Passant if they do a such move. - Kings can make a large casting in either side. - The next player must move from the sub-grid corresponding to the cell just moved to (if they have a legal move from there).\") (id \"1014\") (version \"1.3.14\") (classification \"board/war/replacement/checkmate/chess\") (author \"Cameron Browne\") (credit \"Eric Piette\") (date \"13-10-2020\") } ) (graphics { (show Check \"King\") (piece Scale \"Pawn\" 0.825) (piece Families {\"Defined\" \"Microsoft\" \"Pragmata\" \"Symbola\"}) (board Style Chess) (show line {{30 39} {60 69} {3 93} {6 96}}) }) (ai \"Ultimate Chess_ai\" )"
}