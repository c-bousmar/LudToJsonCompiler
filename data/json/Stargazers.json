{
    "define": {
        "LifegivingLocationsOf": "(forEach (sites Board) if:(or (is In (site) (sites Pattern {F F R R R F R R R} from:(site) whats:{#1 0 3 0})) (is In (site) (sites Pattern {F R R R F F R R R} from:(site) whats:{0 0 0 3}))",
        "IsBlockedForAt": "(or (>= 0 (size Array (array (\"LifegivingLocationsOf\" #1)))) (= Infinity (count Steps (step (to if:(is In (to) (union (sites Empty) (sites Occupied by:(player #1)))))) #2 (\"LifegivingLocationsOf\" #1)",
        "SitesOfTrulyDeadPiecesOfx": "(forEach (sites Occupied by:(player #1)) if:(is In (site) (values Remembered \"#1\"))",
        "SitesOfTrulyDeadPiecesOf": "(intersection { (sites Occupied by:(player #1)) (sites (values Remembered \"#1\")) }",
        "CountOfTrulyDeadPiecesOf": "(size Array (array (\"SitesOfTrulyDeadPiecesOf\" #1)",
        "RememberSitesBlockedForBy": "(forEach Site (difference (union (intersection (sites Around (sites Occupied by:(player #2))) (sites Empty)) (intersection (sites Occupied by:(player #1)) (sites State 1)) ) (sites (values Remembered \"#1\")) ) (if (\"IsBlockedForAt\" #1 (site)) (remember Value \"#1\" (site) unique:True)",
        "FirstLivePiecesOf": "(forEach of:(sites <Board:stars>) (sites Group from:(difference (intersection (sites Occupied by:(player #1)) (sites LineOfSight Piece at:(site)) ) (sites Around (site)) ) if:(= #1 (who at:(to)))",
        "MarkDeadAllDependantPiecesOfNotOf": "(forEach Site (difference (sites Occupied by:(player #1)) (\"FirstLivePiecesOf\" #1) ) (set State at:(site) 1)",
        "UnMarkEachPieceOf": "(forEach Value (array (forEach (intersection (sites Occupied by:(player #1)) (sites State 1)) if:(< 0 (size Array (array (intersection { (sites Occupied by:(player #1)) (sites State 0) (sites LineOfSight Piece at:(site)) } )))))) (set State at:(value) 0)",
        "UnMarkPiecesOf": "(set Var \"Count\" (+ 1 (size Array (array (sites State 1)))) (then (while (> (var \"Count\") (size Array (array (sites State 1)))) (set Var \"Count\" (size Array (array (sites State 1))) (then (\"UnMarkEachPieceOf\" #1) ))",
        "RemarkGroupsOfNotOf": "(do (\"MarkDeadAllDependantPiecesOfNotOf\" #1 #2) next:(\"UnMarkPiecesOf\" #1) (then (\"RememberSitesBlockedForBy\" #1 #2))",
        "SeesStarGazerOfFrom": "(< 0 (size Array (array (forEach of:(intersection (sites LineOfSight Piece at:#2) (sites Occupied by:(player #1)) ) (intersection (sites LineOfSight Piece at:(site)) (difference (sites <Board:stars>) (union (sites Around (site)) (sites Around (to))",
        "SeesStarFrom": "(< 0 (size Array (array (forEach (sites LineOfSight Piece at:#1) if:(is In (site) (difference (sites <Board:stars>) (sites Around #1)))",
        "AddAssuredPieceOfNotOf": "(move Add (piece #1) (to (sites Empty) if:(or (\"SeesStarFrom\" (to)) (\"SeesStarGazerOfFrom\" #1 (to)) ) (apply (set State at:(to) 0)) ) (then (and (\"UnMarkPiecesOf\" #1) (\"RemarkGroupsOfNotOf\" #2 #1)",
        "AddUnassuredPieceOfNotOf": "(move Add (piece #1) (to (sites Empty) if:(and (not (\"SeesStarFrom\" (to))) (not (\"SeesStarGazerOfFrom\" #1 (to))) )) (then (\"RemarkGroupsOfNotOf\" #1 #2))",
        "PlaceByThenCaptureOf": "(or (\"AddAssuredPieceOfNotOf\" #1 #2) (do (\"AddUnassuredPieceOfNotOf\" #1 #2) ifAfterwards:(= 0 (state at:(last To))) (then (\"RemarkGroupsOfNotOf\" #2 #1)) ) (then (and { (if (is In (last To) (values Remembered \"#2\")) (forget Value \"#2\" (last To)) ) (if (\"IsWinByOver\" #1 #2) (\"WinnerNotes\" #1 #2) (if (\"IsWinByOver\" #2 #1) (\"LoserNotes\" #2 #1)) ) }",
        "Score2DisplayP1": "(count Pieces P2 in:(sites State 1",
        "Score2DisplayP2": "(count Pieces P1 in:(sites State 1",
        "WinnerNotes": "(and { (note player:#1 \"Opponent's uninspireable stones (your score)\") (note player:#1 (\"CountOfTrulyDeadPiecesOf\" #2)) (note player:#1 \"Opponent's best case score (your potentially unispired stones)\") (note player:#1 (\"EstimateCOfPotentialCapturesOfBy\" #1 #2)) (note player:#1 \"You won because your opponent has more permanently unispired stones than you can ever have\") }",
        "LoserNotes": "(and { (note player:#1 \"Your uninspireable stones (your opponent's score)\") (note player:#1 (\"CountOfTrulyDeadPiecesOf\" #2)) (note player:#1 \"Your best case score (opponent's potentially unispired stones)\") (note player:#1 (\"EstimateCOfPotentialCapturesOfBy\" #1 #2)) (note player:#1 \"You lost because your opponent has more unispired stones than you can ever have\") }",
        "HeuristicScoreA": "(set Score P1 (\"CountOfTrulyDeadPiecesOf\" 2) (then (set Score P2 (\"CountOfTrulyDeadPiecesOf\" 1) #1",
        "HeuristicScoreB": "(set Score P1 (\"CountOfTrulyDeadPiecesOf\" 2) (then (set Score P2 (\"CountOfTrulyDeadPiecesOf\" 1) #1",
        "HeuristicScoreC": "(set Score P1 (+ (count Sites in:(difference (sites Board) (sites Occupied by:(player 1)))) (- (\"CountOfTrulyDeadPiecesOf\" 2) (\"EstimateBOfPotentialCapturesOfBy\" 1 2)) ) (then (set Score P2 (+ (count Sites in:(difference (sites Board) (sites Occupied by:(player 1)))) (- (\"CountOfTrulyDeadPiecesOf\" 1) (\"EstimateBOfPotentialCapturesOfBy\" 2 1)) ) #1",
        "SitesOfPermanentlyLivePiecesOfNotOf": "(sites Group from:(sites Around (intersection (sites Empty) (sites (values Remembered \"#2\")))) if:(is In (to) (intersection (sites Occupied by:(player #1)) (sites State 0)))",
        "CountOfPermanentlyLivePiecesOfNotOf": "(size Array (array (\"SitesOfPermanentlyLivePiecesOfNotOf\" #1 #2))",
        "SitesOfPossibleFutureCapturesOfBy": "(difference (difference (union (sites Empty) (sites Occupied by:(player #1))) (sites Around (\"SitesOfPermanentlyLivePiecesOfNotOf\" #1 #2) includeSelf:True) ) (intersection (sites Empty) (sites (values Remembered \"#1\")))",
        "IsolatedSitesOfBy": "(forEach (sites Empty) if:(= Infinity (count Steps (step (to if:(is In (to) (union (sites Occupied by:(player #1)) (sites Empty))))) (site) (sites (values Remembered \"#2\"))",
        "SitesOfPossibleFutureCapturesOfByLessEyes": "(difference (\"SitesOfPossibleFutureCapturesOfBy\" #1 #2) (forEach of:(\"IsolatedSitesOfBy\" #1 #2) (sites { (min (array (sites Group at:(site) if:(is In (to) (\"SitesOfPossibleFutureCapturesOfBy\" #1 #2))) )) }",
        "EstimateBOfPotentialCapturesOfBy": "(size Array (array (\"SitesOfPossibleFutureCapturesOfBy\" #1 #2)))",
        "EstimateCOfPotentialCapturesOfBy": "(size Array (array (\"SitesOfPossibleFutureCapturesOfByLessEyes\" #1 #2)))",
        "IsWinByOver": "(< (\"EstimateBOfPotentialCapturesOfBy\" #1 #2) (\"CountOfTrulyDeadPiecesOf\" #2)",
        "SymRemover": "(renumber (rotate (* (- #1 1) (/ 360 #1)) (trim (remove #2 #3",
        "RaggedSquare": "(\"SymRemover\" 4 (\"SymRemover\" 4 (\"SymRemover\" 4 (\"SymRemover\" 4 #1 #2) #2) #2) #3",
        "RaggedTri": "(\"SymRemover\" 1 (\"SymRemover\" 3 (\"SymRemover\" 3 #1 #2) #2) #3",
        "RaggedHex": "(\"SymRemover\" 6 (\"SymRemover\" 6 (\"SymRemover\" 6 (\"SymRemover\" 6 (\"SymRemover\" 6 (\"SymRemover\" 6 #1 #2) #2) #2) #2) #2) #3",
        "Sym2Remover": "(\"SymRemover\" 2 (\"SymRemover\" 2 #1 #2) #2",
        "ShowPotentialDeadPieceAtEnd": "(show Symbol \"starFour.svg\" (if (\"IsWinByOver\" #1 #2) (\"SitesOfPossibleFutureCapturesOfByLessEyes\" #1 #2)) fillColour:(colour Black) edgeColour:(colour 0 0 0 100) scale:.55 rotation:45",
        "ShowOwnership": "(region Colour (union { (\"SitesOfPermanentlyLivePiecesOfNotOf\" #1 #2) (sites (values Remembered \"#2\")) }) regionSiteType:Cell #3 scale:1.02",
        "AllGraphics": "(\"MarkUninspired\") (\"ShowOwnership\" 1 2 (colour 175 150 125)) (\"ShowOwnership\" 2 1 (colour 231 220 197)) (\"ShowPotentialDeadPieceAtEnd\" 1 2) (\"ShowPotentialDeadPieceAtEnd\" 2 1)",
        "MarkUninspired": "(piece Foreground P1 state:1 image:\"starFour.svg\" fillColour:(colour Black) edgeColour:(colour 0 0 0 100) scale:.55 rotation:45) (piece Foreground P2 state:1 image:\"starFour.svg\" fillColour:(colour Black) edgeColour:(colour 0 0 0 0) scale:.5 rotation:45)"
    },
    "game": "\"Stargazers\" (players 2) (equipment { <Board:used> (piece \"Ball\" Each) (piece \"StarFour\" Neutral) } ) (rules (start { (place \"StarFour0\" <Board:stars>) } ) (play (if (is Mover P1) (\"PlaceByThenCaptureOf\" 1 2) (\"PlaceByThenCaptureOf\" 2 1) (then (\"HeuristicScoreC\" <Protocol:type> )))) (end { (if (and (no Moves Mover) (= (count Pieces P2 in:(sites State 1)) (count Pieces P1 in:(sites State 1)) )) (result Mover Loss) ) (if (and (no Moves Mover) (!= (count Pieces P2 in:(sites State 1)) (count Pieces P1 in:(sites State 1)) )) (byScore { (score P1 (count Pieces P2 in:(sites State 1))) (score P2 (count Pieces P1 in:(sites State 1))) } )) (if (\"IsWinByOver\" 1 2) (result P1 Win)) (if (\"IsWinByOver\" 2 1) (result P2 Win)) }",
    "option": {
        "Size": {
            "arguments": "<used> <stars>",
            "items": {}
        },
        "Mode": {
            "arguments": "<graphics>",
            "items": {
                "Standard": {
                    "content": "\"AllGraphics\"",
                    "description": "Standard"
                },
                "Inspired": {
                    "content": "\"MarkUninspired\"",
                    "description": "Inspired"
                },
                "Pro": {
                    "content": "",
                    "description": "Pro"
                }
            }
        },
        "Protocol": {
            "arguments": "<type>",
            "items": {
                "Alternating": {
                    "content": "",
                    "description": "Alternating"
                },
                "Turns 122*": {
                    "content": "(then (if (and \"NewTurn\" (<= 0 (counter))) (moveAgain)))",
                    "description": "Turns 122*"
                }
            }
        }
    },
    "rulesets": {},
    "metadata": {}
}