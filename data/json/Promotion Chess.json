{
    "define": {
        "HasNeverMoved": "(= (state at:(mapEntry #1 (mover))) 1)",
        "PieceHasMoved": "(set State at:#1 0)",
        "RememberPieceHasMoved": "(then (if (= (state at:(last To)) 1) (\"PieceHasMoved\" (last To)) ) )",
        "KingNotCheckedAndToEmpty": "(and (is Empty (to)) (not (\"IsInCheck\" \"King\" Mover at:(to))) )",
        "DecideToCastle": "(move Slide (from (mapEntry #1 (mover))) #2 (between (exact #3) if:#4 ) (to if:True (apply (\"PieceHasMoved\" (from))) ) #5 )",
        "CastleRook": "(slide (from (mapEntry #1 (mover))) #2 (between (exact #3) if:#4 ) (to if:True (apply (\"PieceHasMoved\" (from))) ) )",
        "SmallCastling": "(\"DecideToCastle\" \"King\" E 2 \"KingNotCheckedAndToEmpty\" (then (\"CastleRook\" \"RookRight\" W 2 True)))",
        "BigCastling": "(\"DecideToCastle\" \"King\" W 2 \"KingNotCheckedAndToEmpty\" (then (\"CastleRook\" \"RookLeft\" E 3 True)))",
        "Castling": "(if (and (\"HasNeverMoved\" \"King\") (not (\"IsInCheck\" \"King\" Mover)) ) (or (if (and (\"HasNeverMoved\" \"RookLeft\") (can Move (\"CastleRook\" \"RookLeft\" E 3 (is Empty (to)))) ) \"BigCastling\" ) (if (and (\"HasNeverMoved\" \"RookRight\") (can Move (\"CastleRook\" \"RookRight\" W 2 (is Empty (to)))) ) \"SmallCastling\" ) ) )",
        "SetEnPassantLocation": "(then (set Pending (ahead (last To) Backward)) )",
        "InLocationEnPassant": "(and (is Pending) (= (to) (value Pending)) )",
        "EnPassant": "(move Step (directions {FR FL}) (to if:\"InLocationEnPassant\") (then (remove (ahead (last To) Backward) ) ) )",
        "InitialPawnMove": "(if (is In (from) (sites Start (piece (what at:(from))))) (\"DoubleStepForwardToEmpty\" \"SetEnPassantLocation\") )"
    },
    "game": "\"Promotion Chess\" (\"TwoPlayersNorthSouth\") (equipment { (board (square 8)) (\"ChessPawn\" \"Pawn\" (or \"InitialPawnMove\" \"EnPassant\" ) (then (and (\"ReplayInMovingOn\" (sites Mover \"Promotion\")) (set Counter) ) ) ) (\"ChessRook\" \"Rook\" (then (set Counter)) (\"RememberPieceHasMoved\")) (\"ChessKing\" \"King\" (then (set Counter)) (\"RememberPieceHasMoved\")) (\"ChessBishop\" \"Bishop\" (then (set Counter))) (\"ChessKnight\" \"Knight\" (then (set Counter))) (\"ChessQueen\" \"Queen\" (then (set Counter))) (map \"King\" {(pair 1 \"E1\") (pair 2 \"E8\")}) (map \"RookLeft\" {(pair 1 \"A1\") (pair 2 \"A8\")}) (map \"RookRight\" {(pair 1 \"H1\") (pair 2 \"H8\")}) (regions \"Promotion\" P1 (sites Top)) (regions \"Promotion\" P2 (sites Bottom)) }) (rules (start { (place \"Pawn1\" (union (sites Row 1) (sites Row 3))) (place \"Pawn2\" (union (sites Row 6) (sites Row 4))) (place \"King1\" coord:\"A1\" state:1) (place \"King2\" coord:\"H8\" state:1) }) (play (if \"SameTurn\" (move Promote (last To) (piece {\"Queen\" \"Knight\" \"Bishop\" \"Rook\"}) Mover) (do (or (forEach Piece) (\"Castling\") ) ifAfterwards:(not (\"IsInCheck\" \"King\" Mover)) ) ) ) (end { (\"Checkmate\" \"King\") (if (or (no Moves Mover) (= (counter) 99)) (result Mover Draw)) }) )",
    "option": {},
    "rulesets": {},
    "metadata": "(info { (description \"Same rules as normal chess, with a unique piece setup.\") (rules \"Same rules as normal chess, with a unique piece setup.\") (id \"4290\") (version \"1.3.14\") (classification \"board/war/replacement/checkmate/chess\") (author \"Matthew Stephenson\") (credit \"Matthew Stephenson\") (date \"2024\") } ) (graphics { (show Check \"King\") (piece Scale \"Pawn\" 0.825) (piece Families {\"Defined\" \"Microsoft\" \"Pragmata\" \"Symbola\"}) (board Style Chess) })"
}