{
    "define": {
        "Sites2FirstDoubleEmptySiteFromToward": "(sites Direction from:#1 (directions Vertex from:#1 to:#2) stop:(and (is Empty (to)) (is Empty (ahead (to) (directions Vertex from:#1 to:#2)))) stopIncluded:True distance:Infinity )",
        "Sites2FirstEmptySiteToward": "(sites Direction from:#1 (directions Vertex from:#1 to:#2) included:True stop:(is Empty (to)) stopIncluded:True distance:Infinity )",
        "AnchorSiteFromToward": "(regionSite (forEach (\"Sites2FirstDoubleEmptySiteFromToward\" #1 #2) if:(= (site) (ahead (site) (directions Vertex from:#1 to:#2))) ) index:0 )",
        "ShockPushSitesFromTowards": "(difference (\"Sites2FirstDoubleEmptySiteFromToward\" #1 #2) (if (or { (= -1 (var \"AnchorSite\")) (is Empty (var \"AnchorSite\")) (= #1 (var \"AnchorSite\")) } ) (sites {#1}) (\"Sites2FirstEmptySiteToward\" (var \"AnchorSite\") #1) ))",
        "PushFromTowards": "(if (and (!= #1 #2) (not (is Empty #2))) (set Var \"AnchorSite\" (\"AnchorSiteFromToward\" #1 #2) (then (forEach Site (\"ShockPushSitesFromTowards\" #1 #2) (if (is Empty (site)) (remove (ahead (site) (directions Vertex from:#1 to:#2))) (add (piece (who at:(site))) (to (ahead (site) (directions Vertex from:#1 to:#2)) (apply (remove (to))) ))) (then (remove (#2))) ))))",
        "ResolveShockWave": "(set Var \"LF\" (last To) (then (and { (\"PushFromTowards\" (var \"LF\") (ahead (var \"LF\") NNE)) (\"PushFromTowards\" (var \"LF\") (ahead (var \"LF\") E)) (\"PushFromTowards\" (var \"LF\") (ahead (var \"LF\") SSE)) (\"PushFromTowards\" (var \"LF\") (ahead (var \"LF\") SSW)) (\"PushFromTowards\" (var \"LF\") (ahead (var \"LF\") W)) (\"PushFromTowards\" (var \"LF\") (ahead (var \"LF\") NNW)) } )))",
        "ReleaseFromPool": "(move (from (handSite Mover)) (to (sites Empty)) (then (moveAgain)) )",
        "Release": "(if (is Empty (handSite Mover)) (move Add (to (intersection (sites Board) (sites Empty)))) (\"ReleaseFromPool\") (then (and { (remember Value \"Released\" (mover) unique:True) (\"ResolveShockWave\") } )))",
        "BideMove": "(do (add (to (handSite Mover)) stack:True) next:(move Pass) )",
        "BideMoveX": "(move Propose \"Bide\" (then (add (to (handSite Mover)) stack:True) ))",
        "AssignValueOfNextTo": "(forEach Site (sites Around (sites #2) \"Adj\" if:(= (player) (who at:(to)))) (set Value at:(site) #1) )",
        "AssignPieceValues": "(and { (\"AssignValueOfNextTo\" 1 \"R0x\") (\"AssignValueOfNextTo\" 2 \"R1x\") (\"AssignValueOfNextTo\" 3 \"R2x\") (\"AssignValueOfNextTo\" 4 \"R3x\") (\"AssignValueOfNextTo\" 5 \"R4x\") } )",
        "ScoreSites": "(intersection (difference (sites Board) #1) (sites Occupied by:(player (player))))",
        "ScoreLargestGroupsInsideRegionWithFactor": "(forEach Player (do (\"AssignPieceValues\") next:(if (< 0 (count Sites in:(\"ScoreSites\" #1))) (do (forEach Group \"Adj\" if:(and { (is In (to) (\"ScoreSites\" #1)) } ) (remember Value \"PlayerGroups\" (+ (results from:(sites) to:(from) (value Piece at:(from)) )))) next:(addScore (player (player)) (* #2 (max (values Remembered \"PlayerGroups\"))) (then (forget Value \"PlayerGroups\" All)) )))))",
        "CascadeScoring": "(and { (set Score All 0) (\"ScoreLargestGroupsInsideRegionWithFactor\" (sites Empty) 10000000) (\"ScoreLargestGroupsInsideRegionWithFactor\" (sites \"R0x\") 100000) (\"ScoreLargestGroupsInsideRegionWithFactor\" (sites \"R1x\") 1000) (\"ScoreLargestGroupsInsideRegionWithFactor\" (sites \"R2x\") 10) (\"ScoreLargestGroupsInsideRegionWithFactor\" (sites \"R3x\") 1) } )"
    },
    "game": "\"Bide\" (players <Players:forThisTrial> ) (equipment { (board <BoardShape:gridType> use:Vertex) (hand Each size:1) (piece \"Disc\" Each) (regions \"R0x\" (sites Outer)) (regions \"R1x\" (sites Around (sites \"R0x\") \"Adj\" includeSelf:True)) (regions \"R2x\" (sites Around (sites \"R1x\") \"Adj\" includeSelf:True)) (regions \"R3x\" (sites Around (sites \"R2x\") \"Adj\" includeSelf:True)) (regions \"R4x\" (sites Around (sites \"R3x\") \"Adj\" includeSelf:True)) (regions \"R5x\" (sites Around (sites \"R4x\") \"Adj\" includeSelf:True)) } ) (rules (meta (passEnd NoEnd)) (play (if (or (is Prev Mover) (and (< 0 (size Array (values Remembered \"Released\"))) (> <Players:forThisTrial> (size Array (values Remembered \"Released\"))) )) (\"Release\") (or (\"BideMove\") (or (\"ReleaseFromPool\") (move Add (to (intersection (sites Board) (sites Empty)))) (then \"ResolveShockWave\") ) (then (forget Value \"Released\" All)) ) (then (\"CascadeScoring\") ))) (end (if (= 0 (count Sites in:(intersection (sites Board) (sites Empty)))) (byScore)",
    "option": {},
    "rulesets": {},
    "metadata": {}
}