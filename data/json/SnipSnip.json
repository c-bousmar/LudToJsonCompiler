{
    "define": {
        "SitesAtOmniDiagonal": "(difference (difference (sites Around (sites Around (from) <Board:adj>) <Board:adj>) (sites (from) {{F} {F F}}) ) (from) )",
        "DiagonallyConnectedDomainsOf": "(union (sites Occupied by:(player #1)) (sites (results from:(sites Occupied by:(player #1)) to:(intersection (sites Occupied by:(player #1)) \"SitesAtOmniDiagonal\") (regionSite (intersection (sites Around (from) <Board:adj>) (sites Around (to) <Board:adj>) ) index:0 ))))",
        "SetDiagonalGroupScores": "(forEach Player (set Score (player (player)) (* #1 (max 0 (+ 1 (max (results from:(sites Occupied by:(player (player))) to:(from) (size Array (array (intersection (sites Distance <Board:adj> (step <Board:adj> (to if:(is In (to) (\"DiagonallyConnectedDomainsOf\" (player))) )) from:(from) (min 0) ) (sites Occupied by:(player (player))) ))))) )))))",
        "SetStoneScores": "(set Score P1 (* #1 (count Pieces P1)) (then (set Score P2 (* #1 (count Pieces P2))) ))",
        "SetGroupScores": "(forEach Player (set Score (player (player)) (* #1 (max 0 (max (sizes Group <Board:adj> of:(player)) )))))",
        "SetPairScores": "(forEach Player (set Score (player (player)) (* #1 (/ (+ (results from:(sites Occupied by:(player (player))) to:(sites Around (from) <Board:adj> if:(is In (to) (sites Occupied by:(player (player))))) 1 )) 2 ))))",
        "SitesAllowedDiagonal": "(difference (sites Empty) (sites (results from:(sites Occupied by:P1) to:(forEach of:(intersection \"SitesAtOmniDiagonal\" (sites Occupied by:P2) ) (intersection { (sites Around (from) <Board:adj>) (sites Around (site) <Board:adj>) (sites Empty) } )) (to) )))",
        "Sites2RemoveDiagonal": "(sites (results from:(last To) to:(forEach of:(intersection \"SitesAtOmniDiagonal\" (sites Occupied by:#1) ) (intersection { (sites Around (from) <Board:adj>) (sites Around (site) <Board:adj>) (sites Occupied by:#1) } )) (to) ))",
        "SitesAllowedBetween": "(difference (sites Empty) (sites (results from:(sites Occupied by:P1) to:(forEach of:(sites Distance <Board:adj> from:(from) (exact 2) ) (sites Between <Board:adj> from:(from) to:(site) cond:(and (is In (site) (sites Occupied by:P2)) (is Empty (between)) ))) (to) )))",
        "Sites2RemoveBetween": "(forEach of:(sites Distance (step (to if:(is Next (who at:(to))))) from:(last To) (exact 2) ) (sites Between <Board:adj> from:(last To) to:(site) cond:(is In (between) (sites Occupied by:#1)) ))",
        "Tri46Bug": "(tri {4 6 4 7 4})",
        "Tri56Bug": "(tri {5 6 5 7 5})",
        "Tri57Bug": "(tri {5 7 5 8 5})",
        "Tri78Bug": "(tri {7 8 7 10 6})"
    },
    "game": "\"SnipSnip\" (players 2) (equipment { (board <Board:size> use:Vertex) (piece \"Ball\" Each) } ) (rules (start { (set Score Each 0) } ) (play (if (= 1 (value Player Mover)) (move Remove (<Pattern:capture> Next) (then (and { (set Value Mover 0) <Scoring:forcedTurns> } ))) (move Add (to <Pattern:placement>) (then (if (< 0 (count Pieces in:(<Pattern:capture> Next) )) (set Value Mover 1 (then (moveAgain) ))))) (then <Scoring:option>) )) (end { (if (and (no Moves Next) (= (score P1) (score P2)) ) (result Next Loss) ) (if (and (no Moves Next) (!= (score P1) (score P2)) ) (byScore) ) } ) )",
    "option": {},
    "rulesets": {},
    "metadata": "(info { (description \"SnipSnip is an outgrowth of 'Tri-It-Out', a pattern capture game, in which the capture pattern involves pieces of both player's symmetrically, and is used to exclude captured sites from immediate replacement. SnipSnip uses more local capture patterns: options of between, or diagonally between, opposing pieces. These patterns are self-limiting in the sense of not allowing cyclic captures. These capture patterns dictate dead sites that typically result in alternating linear and honeycomb arrangements of pieces with tactical exceptions. In addition the goal of 'SnipSnip' is changed from 'Tri-It-Out's 'most pieces' to 'largest Group', which creates greater drama and opportunities for turn-around tactics, and is the reason for the SnipSnip name. 'Tri-It-Out' is Misere. 'SnipSnip' also includes non-Misere variants.\") (rules \"SnipSnip is a 2-player strategy game It may be played: -- on a hex grid -- on a square grid -- on a square plus diagonal grid Goal: Largest Group (in Misere, the largest Group loses.) Definitions: A Group is a set of all the pieces that can be reached from any one of them by a series of steps, where a step means movement from one piece to another of the same color, next to it. Note: For the Diagonal-Linked Group options a step also include diagonals (double-steps that are not in the same grid direction). A site is a board intersection. 'Between' Variant: -- A Capture site is any site adjacent to two stones of opposite color in the same line (i.e. directly between them.) 'Diagonal' Variant: -- A Capture site is any site adjacent to each of two stones of opposite color, where those stones are not on the same grid-line. Play: Players take turn, starting on an empty board with White to play. On a turn 1) The mover places to an empty site that is not a Capture site. 2) Then, if possible, the mover removes one of the opponent's checkers from a Capture site that lies adjacent to the placement just made. In the case of Misere, the mover must take an additional turn after each capture. Otherwise, the next player becomes the mover. The game ends when no placement is possible. In the case of a tie, the player who would have been next to place loses.\") (id \"3863\") (version \"1.3.14\") (classification \"experimental\") (author \"Dale W. Walton\") (credit \"Dale W. Walton\") (date \"04-01-2023\") } ) (define \"HighlightConnections\" (show Symbol \"Disc.svg\" Vertex (\"DiagonallyConnectedDomainsOf\" 2) fillColour:(colour 0 0 255 50) edgeColour:(colour 0 0 0 0) scale:1 ) (show Symbol \"Disc.svg\" Vertex (\"DiagonallyConnectedDomainsOf\" 1) fillColour:(colour 255 255 0 100) edgeColour:(colour 0 0 0 0) scale:1 )) (graphics { (board Style Graph) (board Colour InnerEdges (colour 62 72 55)) (board Colour OuterEdges (colour 62 72 55)) (board StyleThickness OuterEdges .25) (board StyleThickness InnerEdges .25) (show Edges Diagonal <Board:diag> (colour 62 72 55)) <Scoring:connectionHighlights> (piece Scale P1 \"Ball\" 0.75) (piece Scale P2 \"Ball\" 0.75) (piece Scale P3 \"Ball\" 0.75) (piece Scale P4 \"Ball\" 0.75) (piece Scale P5 \"Ball\" 0.75) (piece Scale P6 \"Ball\" 0.75) } )"
}