{
    "define": {
        "PossibleLeap": "(if (= 0 #2) (forEach (sites #1 {{F} {F R F} {F L F}}) if:#3 ) (if (= 1 #2) (forEach (sites #1 {{F R F} {F L F}}) if:#3 ) (if (= 2 #2) (forEach (sites #1 {{F R F L F R F} {F L F R F L F}}) if:#3 ) (if (= 3 #2) (forEach (sites #1 {{F R F L F R F L F R F} {F L F R F L F R F L F}}) if:#3 ) (if (= 4 #2) (forEach (union (sites LineOfSight Piece at:#1 Diagonal) (sites LineOfSight Empty at:#1 Diagonal) ) if:#3 ) (if (= 5 #2) (forEach (sites #1 {{F R F F} {F L F F} {F F R F} {F F L F}}) if:#3 ) (if (= 6 #2) (forEach (sites #1 {{F}}) if:#3 ) (if (= 7 #2) (forEach (sites #1 {{F F}}) if:#3 ) (if (= 8 #2) (forEach (sites #1 {{F F F}}) if:#3 ) (if (= 9 #2) (forEach (union (sites LineOfSight Piece at:#1 Orthogonal) (sites LineOfSight Empty at:#1 Orthogonal) ) if:#3 ) (if (= 10 #2) (forEach (sites #1 {{F F} {F R F L F R F} {F L F R F L F}}) if:#3",
        "PossibleLeapSites": "(union (\"PossibleLeap\" #1 (% #2 10) #3) (\"PossibleLeap\" #1 (/ #2 10) #3)",
        "PlacePiece": "(move (from (intersection (sites Occupied by:Mover)(sites Hand Mover)) if:(and (= #1 (state at:(from))) #2)) (to (intersection (sites Empty) (sites Board)) if:(all Sites (\"PossibleLeapSites\" (to) (value Piece at:(from)) (is Next (who at:(site))) ) if:(not (is In (site) (sites Occupied by:Next)))",
        "MovePiece": "(forEach Piece (if (is In (from) (sites Board)) (do (set Var \"Origin\" (from)) next:(forEach Value (union { (results from:(\"PossibleLeapSites\" (var \"Origin\") (value Piece at:(var \"Origin\")) (is Mover (who at:(site))) ) to:(from) (value Piece at:(to)) ) } ) (or (move Select (from (from)) (to (\"PossibleLeapSites\" (var \"Origin\") (value) (or (is Empty (site)) (is Next (who at:(site))) )) if:(and { (is Next (who at:(to))) (!= 1 (state at:(var \"Origin\"))) (or { (= 1 (state at:(to))) (is In (to) (\"PossibleLeapSites\" (var \"Origin\") (value Piece at:(to)) (or (is Empty (site)) (is Next (who at:(site))) ))) } ) } )) (then (and (set State at:(var \"Origin\") 1) (fromTo (from (var \"Origin\")) (to (min (array (forEach (sites Hand <Rule4:deadAttacker>) if:(is Empty (site))))) ))))) (move Select (from (from)) (to (\"PossibleLeapSites\" (var \"Origin\") (value) (or { (is Empty (site)) (is Next (who at:(site))) } )) level:0 if:(or (is Empty (to)) (and (not (= 1 (state at:(to))) ) (or (= 1 (state at:(var \"Origin\"))) (not (is In (to) (\"PossibleLeapSites\" (var \"Origin\") (value Piece at:(to)) (or (is Empty (site)) (is Next (who at:(site))) ))))))) ) (then (set Var \"Dest\" (last To) (then (and { (if (is In (var \"Dest\") (sites Occupied by:Next)) (fromTo (from (var \"Dest\")) (to (min (array (forEach (sites Hand <Rule4:deadDefender>) if:(is Empty (site))))) (apply (set State at:(from) 1)) ) Next )) (fromTo (from (var \"Origin\")) (to (var \"Dest\")) ) } )))))",
        "StillCanPlaceZombies": "(< (count Sites in:(intersection { (sites Board) (sites Occupied by:#1) (sites State 1) } )) (+ #2 (count Sites in:(intersection { (sites Board) (sites Occupied by:#1) (sites State 0) }",
        "PieceMoves": "(priority { (\"PlacePiece\" 0 #1) (if (not (can Move (\"PlacePiece\" 0 #1))) (or { (\"MovePiece\") } )) (if (\"StillCanPlaceZombies\" Mover 0) (\"PlacePiece\" 1 #1) ) } #2",
        "BluffingGame": ""
    },
    "game": "\"Zombego\" (players 2) (equipment { (board (square <Board:size>) use:Cell) (hand P1 size:<Pieces:count>) (hand P2 size:<Pieces:count>) (piece \"Square\" Each maxValue:110) <Pieces:map> } ) (rules (start { (forEach Value min:0 max:(- <Pieces:count> 1) (place Random (sites Hand P1) {\"Square1\"} count:1 state:0 value:(mapEntry (value)) )) (forEach Value min:0 max:(- <Pieces:count> 1) (place Random (sites Hand P2) {\"Square2\"} count:1 state:0 value:(mapEntry (value)) )) <Rule4:hiddenStart> } ) (play (<Rule4:variantPlay>) ) (end { (if (no Moves Next) (result Mover Win) ) (if (not (\"StillCanPlaceZombies\" P1 1)) (result P2 Win) ) (if (not (\"StillCanPlaceZombies\" P2 1)) (result P1 Win) ) }",
    "option": {
        "Board": {
            "arguments": "<size>",
            "items": {
                "3": {
                    "content": "3",
                    "description": "3x3 Square"
                },
                "4": {
                    "content": "4",
                    "description": "4x4 Square"
                },
                "5": {
                    "content": "5",
                    "description": "5x5 Square"
                },
                "6": {
                    "content": "6",
                    "description": "6x6 Square"
                },
                "7": {
                    "content": "7",
                    "description": "7x7 Square"
                },
                "8": {
                    "content": "8",
                    "description": "8x8 Square"
                },
                "9": {
                    "content": "9",
                    "description": "9x9 Square"
                },
                "10": {
                    "content": "10",
                    "description": "10x10 Square"
                },
                "12": {
                    "content": "12",
                    "description": "12x12 Square"
                }
            }
        },
        "Rulesets": {
            "arguments": "<deadAttacker> <deadDefender> <hiddenStart> <variantPlay>",
            "items": {}
        },
        "PieceSet": {
            "arguments": "<count> <map>",
            "items": {
                "(11) 12 plus Slides": {
                    "content": "11> <(map {0..10} {2 7 15 25 44 49 56 57 99 101 106})",
                    "description": "11 Pieces, each defining 12 leaps, plus Rook / Bishop / Queen Slides\" ) } ) (define \"CP1\" White) (define \"CP2\" Black) (define \"Size1\" 0.30) (define \"Size2\" 0.60) (define \"Size3\" 0.74) (define \"PieceElement\" (piece Foreground value:#1 image:\"Square1\" fillColour:(colour Grey) scale:0.14 offsetX:#2 offsetY:#3) ) (define \"PieceElementSmall\" (piece Foreground value:#1 image:\"Square1\" fillColour:(colour Grey) scale:0.12 offsetX:#2 offsetY:#3) ) (define \"D1\" (\"PieceElement\" #1 -\"Size1\" -\"Size1"
                }
            }
        }
    },
    "rulesets": {},
    "metadata": {}
}