(define "CapturePiece"
    (apply 
        (if ("IsEnemyAt" (to))
            (if (= (state at:(to)) 0)
                (add 
                    (piece (mapEntry "Unpromoted" (what at:(to)))) 
                    (to (mapEntry "UnpromotedWhere" (what at:(to))))
                )
                (add 
                    (piece (mapEntry "Demoted" (what at:(to)))) 
                    (to (mapEntry "DemotedWhere" (what at:(to))))
                )
            )
        )
    )
)

(define "NextCannotMove"
    (not 
        (can Move 
            (do 
                (or {
                    ("PlaceUnrestrictedPiece" Next) 
                    ("PlacePawn" Next ifAfterwards:(not ("IsInCheck" "King" Mover)))
                    ("PlacePieceNotInLastRank" Next)
                    ("PlacePieceNotInLastTwoRanks" Next)
                    ("PlacePieceNotInLastThreeRanks" Next)
                    (forEach Piece Next) 
                })
                ifAfterwards:(not ("IsInCheck" "King" Next))
            ) 
        )
    )
)

(define "PlaceUnrestrictedPiece"
    (move 
        (from (sites Occupied by:#1 container:"Hand" components:{"CopperGeneral" "SilverGeneral" "GoldGeneral" "StrongBear" "RoaringDog" "FlyingFalcon" "CloudEagle" "GreatLeopard" "RunningWolf" "GreatElephant" "Kirin" "Phoenix" "Bishop" "Rook" "BishopGeneral" "RookGeneral" "LionHawk" "Queen" "Capricorn" "HookMover"})) 
        (to (sites Empty))
    ) 
)

(define "OnePawnPerColumn" 
    (= 
        (count Sites in:(sites Occupied by:#1 container:"Board" component:"Pawn")) 
        (count Sites in:(difference (sites Occupied by:#1 container:"Board" component:"Pawn") (sites Column (column of:(to)))))
    )
)

(define "PlacePieceNotInLastThreeRanks" 
    (move 
        (from (sites Occupied by:#1 container:"Hand" components:{"FlyingCat" "ThunderRunner"})) 
        (to (difference (sites Empty) (sites #1 "ThreeFurthestRank")))
    )
)

(define "PlacePieceNotInLastTwoRanks" 
    (move 
        (from (sites Occupied by:#1 container:"Hand" components:{"Knight" "FlyingSwallow"})) 
        (to (difference (sites Empty) (sites #1 "TwoFurthestRank")))
    )
)

(define "PlacePieceNotInLastRank" 
    (move 
        (from (sites Occupied by:#1 container:"Hand" components:{"Lance" "RamsHeadSoldier" "RunningRabbit" "StoneGeneral" "IronGeneral"})) 
        (to (difference (sites Empty) (sites #1 "LastRank")))
    )
)

(define "PlacePawn" 
    (do 
        (move 
            (from (sites Occupied by:#1 container:"Hand" component:"Pawn")) 
            (to (difference (sites Empty) (sites #1 "LastRank")) 
                if:("OnePawnPerColumn" #1)
            )
        ) 
        #2
    )
) 

(define "InPromotionZone"
    (is In #1 (sites Mover "Promotion"))	
)

(define "InLastRank"
    (is In #1 (sites Mover "LastRank"))	
)

(define "InTwoFurthestRank"
    (is In #1 (sites Mover "TwoFurthestRank"))	
)

(define "InThreeFurthestRank"
    (is In #1 (sites Mover "ThreeFurthestRank"))	
)

(define "Promote"
    (if (= (state at:(last To)) 0)
        (move Promote 
            (last To) 
            (piece (mapEntry "Promoted" (what at:(last To))))
            (then (set State at:(last To) 1))
        )
    )	
)

(define "CanPromote"
    (then 
        (if 
            (and
                (= (state at:(last To)) 0)
                (or ("InPromotionZone" (last To)) ("InPromotionZone" (last From))) 
            )
            (moveAgain) 
        ) 
    )
)

(define "SlideMove"
    (move Slide
        #1 
        (to if:("IsEnemyAt" (to)) "CapturePiece")
        #2 
    ) 	
)

(define "StepMove"
    (move Step
        #1
        (to if:(not ("IsFriendAt" (to))) "CapturePiece") 
        #2 
    ) 	
)

(define "TwoStepLeap" 
    (forEach Direction 
        #1 
        (to 
            if:True 
            (apply 
                (forEach Direction 
                    (from (to)) 
                    #2 
                    (if (not ("IsFriendAt" (to))) 
                        (move 
                            (from) 
                            (to 
                                ("CapturePiece")
                            )
                        )
                    )
                )
            )
        )
        #3
    )
)

(define "ExtendedTwoStepLeap" 
    (forEach Direction 
        #1 
        #2
        (to 
            if:True 
            (apply 
                (forEach Direction 
                    (from (to)) 
                    #3 
                    #4 
                    (if (not ("IsFriendAt" (to))) 
                        (move 
                            (from) 
                            (to 
                                ("CapturePiece")
                            )
                        )
                    )
                )
            )
        )
        #5
    )
)

(define "ThereAndBack"
    (sites
        Direction
        from:(from)
        #1
        stop:(=
            (count
                Sites
                in:(intersection
                    (sites Occupied by:All)
                    (sites
                        Direction
                        from:(to)
                        (directions Cell from:(to) to:(from))
                        stop:(= (to) (from))
                    )
                )
            )
            4
        )
    )
)

(define "SlidingJumpTargets"
    (intersection
        ("ThereAndBack" #1)
        (sites Occupied by:Next)
    )
)

(define "SlidingJumpMove"
    (or
        (move Slide
            #1 
            (to if:("IsEnemyAt" (to)) "CapturePiece")
            #2 
        ) 	
        (move
            (from (from))
            (to
                ("SlidingJumpTargets" #1)
                if:(and ("IsEnemyAt" (to)) (not (is In (what at:(to)) (sites {(id "King" Next)})))) ("CapturePiece")
            )
            #2 
        )
    )
)

(define "HookMove"
    (or {
        ("SlideMove" #1)
        ("HookMoveIteration" #1 #2 (exact 1))
        ("HookMoveIteration" #1 #2 (exact 2))
        ("HookMoveIteration" #1 #2 (exact 3))
        ("HookMoveIteration" #1 #2 (exact 4))
        ("HookMoveIteration" #1 #2 (exact 5))
        ("HookMoveIteration" #1 #2 (exact 6))
        ("HookMoveIteration" #1 #2 (exact 7))
        ("HookMoveIteration" #1 #2 (exact 8))
        ("HookMoveIteration" #1 #2 (exact 9))
        ("HookMoveIteration" #1 #2 (exact 10))
        ("HookMoveIteration" #1 #2 (exact 11))
        ("HookMoveIteration" #1 #2 (exact 12))
        ("HookMoveIteration" #1 #2 (exact 13))
        ("HookMoveIteration" #1 #2 (exact 14))
    })
)

(define "HookMoveIteration"	
    (forEach Direction 
        #1 
        (between (min 1) if:(is Empty (between))) 
        (to 
            if:(is Empty (to)) 
            (apply 
                (forEach Direction 
                    (from (to)) 
                    (difference (difference #2 (directions Cell from:(from) to:(to))) (directions Cell from:(to) to:(from))) 
                    (between #3 if:(is Empty (between))) 
                    (if (not ("IsFriendAt" (to))) 
                        (move 
                            (from) 
                            (to 
                                ("CapturePiece")
                            )
                        )
                    )
                )
            )
        )
        #4
    )
)

#------------------------------------------------------------------------------

(game "Dai Seireigi" 
    ("TwoPlayersNorthSouth") 
    
    (equipment { 
        (board (square 15))
        
        
        (piece "King" Each ("StepMove"))
        
        
        
        
        (piece "Pawn" Each 
            ("StepMove" Forward 
                (then 
                    (if ("InPromotionZone" (last To))
                        (if ("InLastRank" (last To)) 
                            ("Promote") 
                            (moveAgain) 
                        ) 
                    ) 
                )
            )
        )
        
        
        (piece "Tokin" Each ("StepMove" (directions {Forward Backward Leftward Rightward FL FR})))
        
        
        (piece "GoldGeneral" Each ("StepMove" (directions {Forward Backward Leftward Rightward FL FR}) "CanPromote"))
        
        
        (piece "GreatElephant" Each (or ("SlideMove" (directions {FL FR}) "CanPromote") ("StepMove" (directions {Forward Leftward Rightward BL BR}) "CanPromote")))
        
        
        (piece "TeachingKing" Each (or ("SlideMove" (directions {Forward Backward FL FR})) ("StepMove" (directions {Leftward Rightward BL BR}))))
        
        
        
        
        (piece "Lance" Each 
            ("SlideMove" Forward 
                (then  
                    (if ("InPromotionZone" (last To))
                        (if ("InLastRank" (last To)) 
                            ("Promote") 
                            (moveAgain) 
                        ) 
                    ) 
                )
            )
        )       
        
        
        (piece "FreeTiger" Each (or {("SlideMove" (directions {Leftward Rightward})) ("TwoStepLeap" (directions {Leftward Rightward}) (directions {FL FR})) ("StepMove" (directions {Forward Backward}))}))
        
        
        
        
        (piece "RamsHeadSoldier" Each 
            ("SlideMove" (directions {FL FR}) 
                (then  
                    (if ("InPromotionZone" (last To))
                        (if ("InLastRank" (last To)) 
                            ("Promote") 
                            (moveAgain) 
                        ) 
                    ) 
                )
            )
        )       
        
        
        (piece "TreacherousFox" Each (or {("SlideMove" (directions {Forward Backward})) ("TwoStepLeap" (directions {Forward Backward}) (directions {FL FR})) ("StepMove" (directions {Leftward Rightward}))}))
        
        
        
        
        (piece "RunningRabbit" Each 
            ("SlideMove" (directions {Forward FL FR}) 
                (then  
                    (if ("InPromotionZone" (last To))
                        (if ("InLastRank" (last To)) 
                            ("Promote") 
                            (moveAgain) 
                        ) 
                    ) 
                )
            )
        )  
        
        
        (piece "PrancingStag" Each (or ("SlideMove" (directions {Leftward Rightward FL FR})) ("StepMove" (directions {Forward Backward}))))
        
        
        
        
        (piece "StoneGeneral" Each 
            ("StepMove" (directions {FL FR}) 
                (then 
                    (if ("InPromotionZone" (last To))
                        (if ("InLastRank" (last To)) 
                            ("Promote") 
                            (moveAgain) 
                        ) 
                    ) 
                )
            )
        )
        
        
        (piece "FlyingFalcon" Each (or 
                ("StepMove" (directions {Forward Backward Leftward Rightward FL FR}) "CanPromote")
                ("TwoStepLeap" (directions {Forward Backward}) Forward "CanPromote")
            )
        )
        
        
        (piece "AncientDragon" Each (or {
                ("HookMove" (directions {FL FR}) Diagonal)
                ("StepMove" (directions {BL BR}))
                ("ExtendedTwoStepLeap" (directions {BL BR}) ~ Forward (between (exact 2) if:True))
            })
        )
        
        
        
        
        (piece "IronGeneral" Each 
            ("StepMove" (directions {Forward FL FR}) 
                (then 
                    (if ("InPromotionZone" (last To))
                        (if ("InLastRank" (last To)) 
                            ("Promote") 
                            (moveAgain) 
                        ) 
                    ) 
                )
            )
        )
        
        
        (piece "CloudEagle" Each (or 
                ("StepMove" (directions {Forward Backward FL FR BL BR}) "CanPromote")
                ("TwoStepLeap" (directions {FL FR}) Forward "CanPromote")
            )
        )
        
        
        (piece "SquareMover" Each (or {
                ("HookMove" (directions {Forward}) Orthogonal)
                ("StepMove" (directions {Backward Leftward Rightward}))
                ("ExtendedTwoStepLeap" (directions {Backward Leftward Rightward}) ~ Forward (between (exact 2) if:True))
            })
        )
        
        
        
        
        (piece "Knight" Each 
            ("TwoStepLeap" Forward (directions {FL FR})
                (then 
                    (if ("InPromotionZone" (last To))
                        (if ("InTwoFurthestRank" (last To)) 
                            ("Promote") 
                            (moveAgain) 
                        ) 
                    ) 
                )
            )
        )
        
        
        (piece "HeavenlyHorse" Each (or {("StepMove" (directions {Forward FL FR BL BR})) ("TwoStepLeap" (directions {Forward FL FR}) Forward) ("TwoStepLeap" Backward (directions {FL FR}))}))
        
        
        
        
        (piece "FlyingSwallow" Each 
            ("TwoStepLeap" (directions {Forward FL FR}) Forward
                (then 
                    (if ("InPromotionZone" (last To))
                        (if ("InTwoFurthestRank" (last To)) 
                            ("Promote") 
                            (moveAgain) 
                        ) 
                    ) 
                )
            )
        )
        
        
        (piece "GoldenBird" Each (or {("StepMove" (directions {Forward Backward FL FR})) ("TwoStepLeap" (directions {Backward Leftward Rightward BL BR}) Forward) ("TwoStepLeap" (directions {FL FR}) (directions {FL FR}))}))
        
        
        
        
        (piece "FlyingCat" Each 
            ("ExtendedTwoStepLeap" (directions {Forward FL FR}) ~ Forward (between (exact 2) if:True)
                (then 
                    (if ("InPromotionZone" (last To))
                        (if ("InThreeFurthestRank" (last To)) 
                            ("Promote") 
                            (moveAgain) 
                        ) 
                    ) 
                )
            )
        )
        
        
        (piece "GreatDreamEater" Each (or {
                ("SlidingJumpMove" (directions {Forward Backward}))
                ("SlideMove" (directions {FL FR}))
                ("ExtendedTwoStepLeap" (directions {Backward}) ~ (directions {FL FR}) (between (exact 2) if:True))
                ("ExtendedTwoStepLeap" (directions {Backward}) (between (exact 2) if:True) (directions {BL BR}) ~)
            })
        )
        
        
        
        
        (piece "ThunderRunner" Each (or 
                ("ExtendedTwoStepLeap" (directions {Forward}) ~ (directions {FL FR}) (between (exact 2) if:True)
                    (then 
                        (if ("InPromotionZone" (last To))
                            (if ("InThreeFurthestRank" (last To)) 
                                ("Promote") 
                                (moveAgain) 
                            ) 
                        ) 
                    )
                )
                ("ExtendedTwoStepLeap" (directions {Forward}) (between (exact 2) if:True) (directions {FL FR}) ~
                    (then 
                        (if ("InPromotionZone" (last To))
                            (if ("InThreeFurthestRank" (last To)) 
                                ("Promote") 
                                (moveAgain) 
                            ) 
                        ) 
                    )
                )
            )
        )
        
        
        (piece "FreeDemon" Each (or {
                ("SlidingJumpMove" (directions {FL FR}))
                ("SlideMove" (directions {Leftward Rightward}))
                ("ExtendedTwoStepLeap" (directions {Leftward}) ~ (directions {FL}) (between (exact 2) if:True))
                ("ExtendedTwoStepLeap" (directions {Leftward}) (between (exact 2) if:True) (directions {BR}) ~)
                ("ExtendedTwoStepLeap" (directions {Rightward}) ~ (directions {FR}) (between (exact 2) if:True))
                ("ExtendedTwoStepLeap" (directions {Rightward}) (between (exact 2) if:True) (directions {BL}) ~)
            })
        )
        
        
        
        
        (piece "CopperGeneral" Each ("StepMove" (directions {Forward Backward FL FR}) "CanPromote"))
        
        
        (piece "GreatLeopard" Each (or ("SlideMove" (directions {Leftward Rightward}) "CanPromote") ("StepMove" (directions {FL FR Backward}) "CanPromote")))
        
        
        (piece "FlyingOx" Each ("SlideMove" (directions {Forward Backward FL FR BL BR})))
        
        
        
        
        (piece "SilverGeneral" Each ("StepMove" (directions {Forward BL BR FL FR}) "CanPromote"))
        
        
        (piece "RunningWolf" Each (or ("SlideMove" (directions {Forward Backward}) "CanPromote") ("StepMove" (directions {FL FR Leftward Rightward}) "CanPromote")))
        
        
        (piece "FreeBoar" Each ("SlideMove" (directions {Leftward Rightward FL FR BL BR})))
        
        
        
        
        (piece "StrongBear" Each ("StepMove" (directions {Forward Leftward Rightward FL FR BL BR}) "CanPromote"))
        
        
        (piece "Whale" Each (or {("SlideMove" (directions {Backward FL FR})) ("StepMove" (directions {Forward BL BR})) ("TwoStepLeap" Leftward FL) ("TwoStepLeap" Rightward FR)}))
        
        
        
        
        (piece "RoaringDog" Each 
            (or {
                ("StepMove" (directions {Leftward Rightward BL BR}) "CanPromote") 
                ("TwoStepLeap" Leftward FR "CanPromote") 
                ("TwoStepLeap" Rightward FL "CanPromote")
                ("ExtendedTwoStepLeap" (directions {Leftward}) ~ (directions {FR}) (between (exact 2) if:True)
                    ("CanPromote") 
                )
                ("ExtendedTwoStepLeap" (directions {Leftward}) (between (exact 2) if:True) (directions {FL}) ~
                    ("CanPromote") 
                )
                ("ExtendedTwoStepLeap" (directions {Rightward}) ~ (directions {FL}) (between (exact 2) if:True)
                    ("CanPromote") 
                )
                ("ExtendedTwoStepLeap" (directions {Rightward}) (between (exact 2) if:True) (directions {FR}) ~
                    ("CanPromote") 
                )
            })
        )
        
        
        (piece "WizardStork" Each 
            (or 
                ("SlideMove") 
                ("TwoStepLeap" Adjacent Forward)
            )
        )
        
        
        
        
        (piece "Kirin" Each (or ("StepMove" Diagonal "CanPromote") ("TwoStepLeap" Orthogonal Forward "CanPromote")))
        
        
        (piece "Bishop" Each ("SlideMove" Diagonal "CanPromote"))
        
        
        (piece "DragonHorse" Each (or ("SlideMove" Diagonal "CanPromote") ("StepMove" Orthogonal "CanPromote")))
        
        
        
        
        (piece "Phoenix" Each (or ("StepMove" Orthogonal "CanPromote") ("TwoStepLeap" Diagonal Forward "CanPromote")))
        
        
        (piece "Rook" Each ("SlideMove" Orthogonal "CanPromote"))
        
        
        (piece "DragonKing" Each (or ("SlideMove" Orthogonal "CanPromote") ("StepMove" Diagonal "CanPromote")))
        
        
        
        
        (piece "BishopGeneral" Each ("SlidingJumpMove" Diagonal "CanPromote"))
        
        
        (piece "ViceGeneral" Each 
            (or {
                ("SlidingJumpMove" Diagonal)
                ("TwoStepLeap" Orthogonal (directions {FL FR})) 
                ("TwoStepLeap" Adjacent Forward)
            })
        )
        
        
        
        
        (piece "RookGeneral" Each ("SlidingJumpMove" Orthogonal "CanPromote"))
        
        
        (piece "GreatGeneral" Each ("SlidingJumpMove"))
        
        
        
        
        (piece "LionHawk" Each 
            (or {
                ("SlideMove" Diagonal) 
                ("TwoStepLeap" Orthogonal (directions {FL FR})) 
                ("TwoStepLeap" Adjacent Forward)
            })
        )
        
        
        
        
        (piece "Queen" Each ("SlideMove"))
        
        
        
        
        (piece "Capricorn" Each ("HookMove" Diagonal Diagonal))
        
        
        
        
        (piece "HookMover" Each ("HookMove" Orthogonal Orthogonal))
        
        (regions "LastRankP1" P1 (sites Top))
        (regions "LastRankP2" P2 (sites Bottom))
        (regions "TwoFurthestRankP1" P1 (expand (sites Top)))
        (regions "TwoFurthestRankP2" P2 (expand (sites Bottom)))
        (regions "ThreeFurthestRankP1" P1 (expand (sites Top) steps:2))
        (regions "ThreeFurthestRankP2" P2 (expand (sites Bottom) steps:2))
        (regions "Promotion" P1 (expand (sites Top) steps:4))
        (regions "Promotion" P2 (expand (sites Bottom) steps:4))
        
        (map "UnpromotedWhere" {
            (pair (id "Pawn" P1) (handSite P2)) (pair (id "Pawn" P2) (handSite P1)) 
            (pair (id "Lance" P1) (handSite P2 1)) (pair (id "Lance" P2) (handSite P1 1))
            (pair (id "RamsHeadSoldier" P1) (handSite P2 2)) (pair (id "RamsHeadSoldier" P2) (handSite P1 2))
            (pair (id "RunningRabbit" P1) (handSite P2 3)) (pair (id "RunningRabbit" P2) (handSite P1 3))
            (pair (id "StoneGeneral" P1) (handSite P2 4)) (pair (id "StoneGeneral" P2) (handSite P1 4))
            (pair (id "IronGeneral" P1) (handSite P2 5)) (pair (id "IronGeneral" P2) (handSite P1 5))
            (pair (id "Knight" P1) (handSite P2 6)) (pair (id "Knight" P2) (handSite P1 6))
            (pair (id "FlyingSwallow" P1) (handSite P2 7)) (pair (id "FlyingSwallow" P2) (handSite P1 7))
            (pair (id "FlyingCat" P1) (handSite P2 8)) (pair (id "FlyingCat" P2) (handSite P1 8))
            (pair (id "ThunderRunner" P1) (handSite P2 9)) (pair (id "ThunderRunner" P2) (handSite P1 9))
            (pair (id "CopperGeneral" P1) (handSite P2 10)) (pair (id "CopperGeneral" P2) (handSite P1 10)) 
            (pair (id "SilverGeneral" P1) (handSite P2 11)) (pair (id "SilverGeneral" P2) (handSite P1 11)) 
            (pair (id "GoldGeneral" P1) (handSite P2 12)) (pair (id "GoldGeneral" P2) (handSite P1 12)) 
            (pair (id "StrongBear" P1) (handSite P2 13)) (pair (id "StrongBear" P2) (handSite P1 13))
            (pair (id "RoaringDog" P1) (handSite P2 14)) (pair (id "RoaringDog" P2) (handSite P1 14))
            (pair (id "FlyingFalcon" P1) (handSite P2 15)) (pair (id "FlyingFalcon" P2) (handSite P1 15))
            (pair (id "CloudEagle" P1) (handSite P2 16)) (pair (id "CloudEagle" P2) (handSite P1 16))
            (pair (id "GreatLeopard" P1) (handSite P2 17)) (pair (id "GreatLeopard" P2) (handSite P1 17))
            (pair (id "RunningWolf" P1) (handSite P2 18)) (pair (id "RunningWolf" P2) (handSite P1 18))
            (pair (id "GreatElephant" P1) (handSite P2 19)) (pair (id "GreatElephant" P2) (handSite P1 19)) 
            (pair (id "Kirin" P1) (handSite P2 20)) (pair (id "Kirin" P2) (handSite P1 20))
            (pair (id "Phoenix" P1) (handSite P2 21)) (pair (id "Phoenix" P2) (handSite P1 21))
            (pair (id "Bishop" P1) (handSite P2 22)) (pair (id "Bishop" P2) (handSite P1 22)) 
            (pair (id "Rook" P1) (handSite P2 23)) (pair (id "Rook" P2) (handSite P1 23))
            (pair (id "BishopGeneral" P1) (handSite P2 24)) (pair (id "BishopGeneral" P2) (handSite P1 24)) 
            (pair (id "RookGeneral" P1) (handSite P2 25)) (pair (id "RookGeneral" P2) (handSite P1 25))
            (pair (id "LionHawk" P1) (handSite P2 26)) (pair (id "LionHawk" P2) (handSite P1 26)) 
            (pair (id "Queen" P1) (handSite P2 27)) (pair (id "Queen" P2) (handSite P1 27)) 
            (pair (id "Capricorn" P1) (handSite P2 28)) (pair (id "Capricorn" P2) (handSite P1 28)) 
            (pair (id "HookMover" P1) (handSite P2 29)) (pair (id "HookMover" P2) (handSite P1 29))
        })
        
        (map "DemotedWhere" {
            (pair (id "Tokin" P1) (handSite P2)) (pair (id "Tokin" P2) (handSite P1)) 
            (pair (id "FreeTiger" P1) (handSite P2 1)) (pair (id "FreeTiger" P2) (handSite P1 1)) 
            (pair (id "TreacherousFox" P1) (handSite P2 2)) (pair (id "TreacherousFox" P2) (handSite P1 2)) 
            (pair (id "PrancingStag" P1) (handSite P2 3)) (pair (id "PrancingStag" P2) (handSite P1 3))
            (pair (id "FlyingFalcon" P1) (handSite P2 4)) (pair (id "FlyingFalcon" P2) (handSite P1 4)) 
            (pair (id "CloudEagle" P1) (handSite P2 5)) (pair (id "CloudEagle" P2) (handSite P1 5)) 
            (pair (id "HeavenlyHorse" P1) (handSite P2 6)) (pair (id "HeavenlyHorse" P2) (handSite P1 6)) 
            (pair (id "GoldenBird" P1) (handSite P2 7)) (pair (id "GoldenBird" P2) (handSite P1 7)) 
            (pair (id "GreatDreamEater" P1) (handSite P2 8)) (pair (id "GreatDreamEater" P2) (handSite P1 8)) 
            (pair (id "FreeDemon" P1) (handSite P2 9)) (pair (id "FreeDemon" P2) (handSite P1 9)) 
            (pair (id "GreatLeopard" P1) (handSite P2 10)) (pair (id "GreatLeopard" P2) (handSite P1 10)) 
            (pair (id "RunningWolf" P1) (handSite P2 11)) (pair (id "RunningWolf" P2) (handSite P1 11)) 
            (pair (id "GreatElephant" P1) (handSite P2 12)) (pair (id "GreatElephant" P2) (handSite P1 12)) 
            (pair (id "Whale" P1) (handSite P2 13)) (pair (id "Whale" P2) (handSite P1 13)) 
            (pair (id "WizardStork" P1) (handSite P2 14)) (pair (id "WizardStork" P2) (handSite P1 14)) 
            (pair (id "AncientDragon" P1) (handSite P2 15)) (pair (id "AncientDragon" P2) (handSite P1 15)) 
            (pair (id "SquareMover" P1) (handSite P2 16)) (pair (id "SquareMover" P2) (handSite P1 16)) 
            (pair (id "FlyingOx" P1) (handSite P2 17)) (pair (id "FlyingOx" P2) (handSite P1 17)) 
            (pair (id "FreeBoar" P1) (handSite P2 18)) (pair (id "FreeBoar" P2) (handSite P1 18)) 
            (pair (id "TeachingKing" P1) (handSite P2 19)) (pair (id "TeachingKing" P2) (handSite P1 19)) 
            (pair (id "Bishop" P1) (handSite P2 20)) (pair (id "Bishop" P2) (handSite P1 20)) 
            (pair (id "Rook" P1) (handSite P2 21)) (pair (id "Rook" P2) (handSite P1 21)) 
            (pair (id "DragonHorse" P1) (handSite P2 22)) (pair (id "DragonHorse" P2) (handSite P1 22)) 
            (pair (id "DragonKing" P1) (handSite P2 23)) (pair (id "DragonKing" P2) (handSite P1 23)) 
            (pair (id "ViceGeneral" P1) (handSite P2 24)) (pair (id "ViceGeneral" P2) (handSite P1 24)) 
            (pair (id "GreatGeneral" P1) (handSite P2 25)) (pair (id "GreatGeneral" P2) (handSite P1 25)) 
        })
        
        
        (map "Unpromoted" { 
            (pair (id "Pawn" P1) (id "Pawn" P2)) (pair (id "Pawn" P2) (id "Pawn" P1)) 
            (pair (id "Lance" P1) (id "Lance" P2)) (pair (id "Lance" P2) (id "Lance" P1)) 
            (pair (id "RamsHeadSoldier" P1) (id "RamsHeadSoldier" P2)) (pair (id "RamsHeadSoldier" P2) (id "RamsHeadSoldier" P1))
            (pair (id "RunningRabbit" P1) (id "RunningRabbit" P2)) (pair (id "RunningRabbit" P2) (id "RunningRabbit" P1))
            (pair (id "StoneGeneral" P1) (id "StoneGeneral" P2)) (pair (id "StoneGeneral" P2) (id "StoneGeneral" P1)) 
            (pair (id "IronGeneral" P1) (id "IronGeneral" P2)) (pair (id "IronGeneral" P2) (id "IronGeneral" P1)) 
            (pair (id "Knight" P1) (id "Knight" P2)) (pair (id "Knight" P2) (id "Knight" P1)) 
            (pair (id "FlyingSwallow" P1) (id "FlyingSwallow" P2)) (pair (id "FlyingSwallow" P2) (id "FlyingSwallow" P1)) 
            (pair (id "FlyingCat" P1) (id "FlyingCat" P2)) (pair (id "FlyingCat" P2) (id "FlyingCat" P1)) 
            (pair (id "ThunderRunner" P1) (id "ThunderRunner" P2)) (pair (id "ThunderRunner" P2) (id "ThunderRunner" P1)) 
            (pair (id "CopperGeneral" P1) (id "CopperGeneral" P2)) (pair (id "CopperGeneral" P2) (id "CopperGeneral" P1)) 
            (pair (id "SilverGeneral" P1) (id "SilverGeneral" P2)) (pair (id "SilverGeneral" P2) (id "SilverGeneral" P1)) 
            (pair (id "GoldGeneral" P1) (id "GoldGeneral" P2)) (pair (id "GoldGeneral" P2) (id "GoldGeneral" P1)) 
            (pair (id "StrongBear" P1) (id "StrongBear" P2)) (pair (id "StrongBear" P2) (id "StrongBear" P1)) 
            (pair (id "RoaringDog" P1) (id "RoaringDog" P2)) (pair (id "RoaringDog" P2) (id "RoaringDog" P1)) 
            (pair (id "FlyingFalcon" P1) (id "FlyingFalcon" P2)) (pair (id "FlyingFalcon" P2) (id "FlyingFalcon" P1)) 
            (pair (id "CloudEagle" P1) (id "CloudEagle" P2)) (pair (id "CloudEagle" P2) (id "CloudEagle" P1)) 
            (pair (id "GreatLeopard" P1) (id "GreatLeopard" P2)) (pair (id "GreatLeopard" P2) (id "GreatLeopard" P1)) 
            (pair (id "RunningWolf" P1) (id "RunningWolf" P2)) (pair (id "RunningWolf" P2) (id "RunningWolf" P1)) 
            (pair (id "GreatElephant" P1) (id "GreatElephant" P2)) (pair (id "GreatElephant" P2) (id "GreatElephant" P1)) 
            (pair (id "Kirin" P1) (id "Kirin" P2)) (pair (id "Kirin" P2) (id "Kirin" P1)) 
            (pair (id "Phoenix" P1) (id "Phoenix" P2)) (pair (id "Phoenix" P2) (id "Phoenix" P1)) 
            (pair (id "Bishop" P1) (id "Bishop" P2)) (pair (id "Bishop" P2) (id "Bishop" P1)) 
            (pair (id "Rook" P1) (id "Rook" P2)) (pair (id "Rook" P2) (id "Rook" P1)) 
            (pair (id "BishopGeneral" P1) (id "BishopGeneral" P2)) (pair (id "BishopGeneral" P2) (id "BishopGeneral" P1)) 
            (pair (id "RookGeneral" P1) (id "RookGeneral" P2)) (pair (id "RookGeneral" P2) (id "RookGeneral" P1)) 
            (pair (id "LionHawk" P1) (id "LionHawk" P2)) (pair (id "LionHawk" P2) (id "LionHawk" P1)) 
            (pair (id "Queen" P1) (id "Queen" P2)) (pair (id "Queen" P2) (id "Queen" P1)) 
            (pair (id "Capricorn" P1) (id "Capricorn" P2)) (pair (id "Capricorn" P2) (id "Capricorn" P1)) 
            (pair (id "HookMover" P1) (id "HookMover" P2)) (pair (id "HookMover" P2) (id "HookMover" P1)) 
        })
        
        
        (map "Demoted" { 
            (pair (id "Tokin" P1) (id "Pawn" P2)) (pair (id "Tokin" P2) (id "Pawn" P1)) 
            (pair (id "FreeTiger" P1) (id "Lance" P2)) (pair (id "FreeTiger" P2) (id "Lance" P1)) 
            (pair (id "TreacherousFox" P1) (id "RamsHeadSoldier" P2)) (pair (id "TreacherousFox" P2) (id "RamsHeadSoldier" P1)) 
            (pair (id "PrancingStag" P1) (id "RunningRabbit" P2)) (pair (id "PrancingStag" P2) (id "RunningRabbit" P1))
            (pair (id "FlyingFalcon" P1) (id "StoneGeneral" P2)) (pair (id "FlyingFalcon" P2) (id "StoneGeneral" P1)) 
            (pair (id "CloudEagle" P1) (id "IronGeneral" P2)) (pair (id "CloudEagle" P2) (id "IronGeneral" P1)) 
            (pair (id "HeavenlyHorse" P1) (id "Knight" P2)) (pair (id "HeavenlyHorse" P2) (id "Knight" P1)) 
            (pair (id "GoldenBird" P1) (id "FlyingSwallow" P2)) (pair (id "GoldenBird" P2) (id "FlyingSwallow" P1)) 
            (pair (id "GreatDreamEater" P1) (id "FlyingCat" P2)) (pair (id "GreatDreamEater" P2) (id "FlyingCat" P1)) 
            (pair (id "FreeDemon" P1) (id "ThunderRunner" P2)) (pair (id "FreeDemon" P2) (id "ThunderRunner" P1)) 
            (pair (id "GreatLeopard" P1) (id "CopperGeneral" P2)) (pair (id "GreatLeopard" P2) (id "CopperGeneral" P1)) 
            (pair (id "RunningWolf" P1) (id "SilverGeneral" P2)) (pair (id "RunningWolf" P2) (id "SilverGeneral" P1)) 
            (pair (id "GreatElephant" P1) (id "GoldGeneral" P2)) (pair (id "GreatElephant" P2) (id "GoldGeneral" P1)) 
            (pair (id "Whale" P1) (id "StrongBear" P2)) (pair (id "Whale" P2) (id "StrongBear" P1)) 
            (pair (id "WizardStork" P1) (id "RoaringDog" P2)) (pair (id "WizardStork" P2) (id "RoaringDog" P1)) 
            (pair (id "AncientDragon" P1) (id "FlyingFalcon" P2)) (pair (id "AncientDragon" P2) (id "FlyingFalcon" P1)) 
            (pair (id "SquareMover" P1) (id "CloudEagle" P2)) (pair (id "SquareMover" P2) (id "CloudEagle" P1)) 
            (pair (id "FlyingOx" P1) (id "GreatLeopard" P2)) (pair (id "FlyingOx" P2) (id "GreatLeopard" P1)) 
            (pair (id "FreeBoar" P1) (id "RunningWolf" P2)) (pair (id "FreeBoar" P2) (id "RunningWolf" P1)) 
            (pair (id "TeachingKing" P1) (id "GreatElephant" P2)) (pair (id "TeachingKing" P2) (id "GreatElephant" P1)) 
            (pair (id "Bishop" P1) (id "Kirin" P2)) (pair (id "Bishop" P2) (id "Kirin" P1)) 
            (pair (id "Rook" P1) (id "Phoenix" P2)) (pair (id "Rook" P2) (id "Phoenix" P1)) 
            (pair (id "DragonHorse" P1) (id "Bishop" P2)) (pair (id "DragonHorse" P2) (id "Bishop" P1)) 
            (pair (id "DragonKing" P1) (id "Rook" P2)) (pair (id "DragonKing" P2) (id "Rook" P1)) 
            (pair (id "ViceGeneral" P1) (id "BishopGeneral" P2)) (pair (id "ViceGeneral" P2) (id "BishopGeneral" P1)) 
            (pair (id "GreatGeneral" P1) (id "RookGeneral" P2)) (pair (id "GreatGeneral" P2) (id "RookGeneral" P1)) 
        })
        
        (map "Promoted" { 
            (pair (id "Pawn" P1) (id "Tokin" P1)) (pair (id "Pawn" P2) (id "Tokin" P2)) 
            (pair (id "Lance" P1) (id "FreeTiger" P1)) (pair (id "Lance" P2) (id "FreeTiger" P2)) 
            (pair (id "RamsHeadSoldier" P1) (id "TreacherousFox" P1)) (pair (id "RamsHeadSoldier" P2) (id "TreacherousFox" P2))
            (pair (id "RunningRabbit" P1) (id "PrancingStag" P1)) (pair (id "RunningRabbit" P2) (id "PrancingStag" P2)) 
            (pair (id "RoaringDog" P1) (id "WizardStork" P1)) (pair (id "RoaringDog" P2) (id "WizardStork" P2)) 
            (pair (id "StoneGeneral" P1) (id "FlyingFalcon" P1)) (pair (id "StoneGeneral" P2) (id "FlyingFalcon" P2))  
            (pair (id "IronGeneral" P1) (id "CloudEagle" P1)) (pair (id "IronGeneral" P2) (id "CloudEagle" P2))  
            (pair (id "Knight" P1) (id "HeavenlyHorse" P1)) (pair (id "Knight" P2) (id "HeavenlyHorse" P2)) 
            (pair (id "FlyingSwallow" P1) (id "GoldenBird" P1)) (pair (id "FlyingSwallow" P2) (id "GoldenBird" P2))
            (pair (id "FlyingCat" P1) (id "GreatDreamEater" P1)) (pair (id "FlyingCat" P2) (id "GreatDreamEater" P2)) 
            (pair (id "ThunderRunner" P1) (id "FreeDemon" P1)) (pair (id "ThunderRunner" P2) (id "FreeDemon" P2)) 
            (pair (id "CopperGeneral" P1) (id "GreatLeopard" P1)) (pair (id "CopperGeneral" P2) (id "GreatLeopard" P2)) 
            (pair (id "SilverGeneral" P1) (id "RunningWolf" P1)) (pair (id "SilverGeneral" P2) (id "RunningWolf" P2)) 
            (pair (id "GoldGeneral" P1) (id "GreatElephant" P1)) (pair (id "GoldGeneral" P2) (id "GreatElephant" P2))  
            (pair (id "StrongBear" P1) (id "Whale" P1)) (pair (id "StrongBear" P2) (id "Whale" P2)) 
            (pair (id "FlyingFalcon" P1) (id "AncientDragon" P1)) (pair (id "FlyingFalcon" P2) (id "AncientDragon" P2)) 
            (pair (id "CloudEagle" P1) (id "SquareMover" P1)) (pair (id "CloudEagle" P2) (id "SquareMover" P2)) 
            (pair (id "GreatLeopard" P1) (id "FlyingOx" P1)) (pair (id "GreatLeopard" P2) (id "FlyingOx" P2)) 
            (pair (id "RunningWolf" P1) (id "FreeBoar" P1)) (pair (id "RunningWolf" P2) (id "FreeBoar" P2)) 
            (pair (id "GreatElephant" P1) (id "TeachingKing" P1)) (pair (id "GreatElephant" P2) (id "TeachingKing" P2)) 
            (pair (id "Kirin" P1) (id "Bishop" P1)) (pair (id "Kirin" P2) (id "Bishop" P2)) 
            (pair (id "Phoenix" P1) (id "Rook" P1)) (pair (id "Phoenix" P2) (id "Rook" P2)) 
            (pair (id "Bishop" P1) (id "DragonHorse" P1)) (pair (id "Bishop" P2) (id "DragonHorse" P2)) 
            (pair (id "Rook" P1) (id "DragonKing" P1)) (pair (id "Rook" P2) (id "DragonKing" P2)) 
            (pair (id "BishopGeneral" P1) (id "ViceGeneral" P1)) (pair (id "BishopGeneral" P2) (id "ViceGeneral" P2)) 
            (pair (id "RookGeneral" P1) (id "GreatGeneral" P1)) (pair (id "RookGeneral" P2) (id "GreatGeneral" P2)) 
        })
        
        (hand Each size:30)
    })
    
    (rules 
        (start { 
            (place "King1" coord:"H1") (place "HookMover1" coord:"I4") (place "Capricorn1" coord:"G4") (place "Queen1" coord:"H4") (place "LionHawk1" coord:"H3") (place "RookGeneral1" coord:"K1") (place "BishopGeneral1" coord:"E1") (place "Rook1" coord:"J4") (place "Bishop1" coord:"F4") (place "Phoenix1" coord:"J3") (place "Kirin1" coord:"F3") (place "GreatElephant1" coord:"H2") (place "RunningWolf1" coord:"L4") (place "GreatLeopard1" coord:"D4") (place "CloudEagle1" coord:"N4") (place "FlyingFalcon1" coord:"B4") (place "RoaringDog1" {"D1" "L1"}) (place "StrongBear1" {"F1" "J1"}) (place "GoldGeneral1" {"G1" "I1"}) (place "SilverGeneral1" {"G2" "I2"}) (place "CopperGeneral1" {"G3" "I3"}) (place "ThunderRunner1" {"F2" "J2"}) (place "FlyingCat1" {"C1" "M1"}) (place "FlyingSwallow1" {"A3" "O3"}) (place "Knight1" {"B2" "N2"}) (place "IronGeneral1" {"E3" "K3"}) (place "StoneGeneral1" {"C3" "M3"}) (place "RunningRabbit1" {"D2" "L2"}) (place "RamsHeadSoldier1" {"B1" "N1"}) (place "Lance1" {"A1" "O1"}) (place "Pawn1" (sites Row 4))
            
            (place "King2" coord:"H15") (place "HookMover2" coord:"G12") (place "Capricorn2" coord:"I12") (place "Queen2" coord:"H12") (place "LionHawk2" coord:"H13") (place "RookGeneral2" coord:"E15") (place "BishopGeneral2" coord:"K15") (place "Rook2" coord:"F12") (place "Bishop2" coord:"J12") (place "Phoenix2" coord:"F13") (place "Kirin2" coord:"J13") (place "GreatElephant2" coord:"H14") (place "RunningWolf2" coord:"D12") (place "GreatLeopard2" coord:"L12") (place "CloudEagle2" coord:"B12") (place "FlyingFalcon2" coord:"N12") (place "RoaringDog2" {"D15" "L15"}) (place "StrongBear2" {"F15" "J15"}) (place "GoldGeneral2" {"G15" "I15"}) (place "SilverGeneral2" {"G14" "I14"}) (place "CopperGeneral2" {"G13" "I13"}) (place "ThunderRunner2" {"F14" "J14"}) (place "FlyingCat2" {"C15" "M15"}) (place "FlyingSwallow2" {"A13" "O13"}) (place "Knight2" {"B14" "N14"}) (place "IronGeneral2" {"E13" "K13"}) (place "StoneGeneral2" {"C13" "M13"}) (place "RunningRabbit2" {"D14" "L14"}) (place "RamsHeadSoldier2" {"B15" "N15"}) (place "Lance2" {"A15" "O15"}) (place "Pawn2" (sites Row 10))
        })
        
        (play
            (if ("SameTurn")
                (or
                    ("Promote")
                    (move Pass)
                )
                (do 
                    (or {
                        ("PlaceUnrestrictedPiece" Mover)
                        ("PlacePawn" Mover ifAfterwards:(not (and ("IsInCheck" "King" Next) ("NextCannotMove"))))
                        ("PlacePieceNotInLastRank" Mover)
                        ("PlacePieceNotInLastTwoRanks" Mover)
                        ("PlacePieceNotInLastThreeRanks" Mover)
                        (forEach Piece) 
                    })
                    ifAfterwards:(not ("IsInCheck" "King" Mover))
                )
            )
        )
        
        (end {
            (if (and 
                    ("IsInCheck" "King" Next)
                    ("NextCannotMove")
                ) 
                (result Mover Win)
            ) 
            ("BlockWin")
        })
    )
)

#------------------------------------------------------------------------------

(metadata 
    
    (info
        {
        (description "Dai Seireigi (大精霊棋 <i>dai seireigi</i>, great spirit's game) is a large variant of Seireigi which is essentially a version of Dai Shogi that is designed to be played with the drop rule. Because of this, most unpromoted pieces have a forward bias in their movements and are quite weak, and the Lion is replaced with the Lion Hawk, which moves as a Bishop or jumps anywhere within a distance of exactly two squares. Also present are pieces that jump to the third perimeter, jumping sliders, which can optionally jump up to three piece along the line of attack while sliding but cannot jump-capture a King, and hook movers, which are sliders that can optionally make a single 90-degree turn at an empty square and continue sliding in the new direction.
            
            Captured pieces are placed in the hand in the following order, from left to right:
            ● Pawn
            ● Lance
            ● Ram's-Head Soldier
            ● Running Rabbit
            ● Stone General
            ● Iron General
            ● Knight
            ● Flying Swallow
            ● Flying Cat
            ● Thunder Runner
            ● Copper General
            ● Silver General
            ● Gold General
            ● Strong Bear
            ● Roaring Dog
            ● Flying Falcon
            ● Cloud Eagle
            ● Great Leopard
            ● Running Wolf
            ● Great Elephant
            ● Kirin
            ● Phoenix
            ● Bishop
            ● Rook
            ● Bishop General
            ● Rook General
            ● Lion Hawk
            ● Queen
            ● Capricorn
        ● Hook Mover")
        (rules "All rules are the same as in standard Shogi, except as follows.
            ● The initial setup and equipment are different (Game -> Restart (Ctrl-R) to see on board)
            ● The board may be either a traditional uncheckered Shogi board, or a checkered board with a dark square at each player's left-hand side.
            ● Lances promote to Free Tiger, which slides sideways, steps one square vertically, or jumps to any square that is two squares to either side in an adjacent rank (row).
            ● The Ram's-Head Soldier slides diagonally forward, promotes to Great Stag, which slides vertically, steps one square sideways, or jumps to any square that is two squares ahead or behind in an adjacent file (column).
            ● The Running Rabbit slides in any forward direction, promotes to Prancing Stag, which slides sideways or diagonally forward, or steps one square vertically.
            ● The Stone General steps one square diagonally forward, promotes to Flying Falcon, which steps one square orthogonally or forward, or jumps two squares in a straight line vertically.
            ● The Iron General steps one square in any forward direction, promotes to Cloud Eagle, which steps one square diagonally or vertically, or jumps two squares in a straight line diagonally forward.
            ● Knights promote to Heavenly Horse, which steps one square in any diagonal or forward direction, jumps two squares in any forward direction, or jumps to either square that is two squares behind in an adjacent file (column).
            ● The Flying Swallow jumps two squares in a straight line in any forward direction, promotes to Golden Bird, which jumps two squares in a straight line in any sideways or backwards direction, jumps to either square that is two squares to either side in the rank (row) immediately in front of it, jumps to either square that is two squares ahead in an adjacent file (column), or steps one square vertically or forward.
            ● The Flying Cat jumps three squares in a straight line in any forward direction, promotes to Great Dream-Eater, which slide-jumps‡ vertically, slides diagonally forward, or jumps three squares straight backward and then one or two squares straight sideways.
            ● The Thunder Runner jumps three squares straight forward and then one or two squares straight sideways, promotes to Free Demon, which slide-jumps‡ diagonally forward, slides sideways, or jumps three squares straight sideways and then one or two squares straight backward.
            ● The Copper General steps one square vertically or forward, promotes to Great Leopard, which steps one square straight backward or diagonally forward, or slides sideways.
            ● Silver Generals promote to Running Wolf, which steps one square sideways or diagonally forward, or slides vertically.
            ● Gold Generals promote to Great Elephant, which steps one square diagonally backward or orthogonally sideways or forward, or slides diagonally forward.
            ● The Strong Bear steps one square in any diagonal, sideways, or forward direction, promotes to Whale, which slides diagonally forward or directly backward, steps one square diagonally backward or directly forward, or jumps to either square that is two squares to either side in the rank (row) immediately behind it.
            ● The Roaring Dog steps one square sideways or diagonally backward, jumps to either square that is two squares to either side in the rank (row) immediately in front of it, or jumps three squares straight sideways and then one or two squares straight forward, promotes to Wizard Stork, which slides, or jumps two squares in a straight line, in any direction.
            ● The Flying Falcon steps one square orthogonally or forward, or jumps two squares in a straight line vertically, promotes to Ancient Dragon, which slides diagonally forward and can optionally make a single 90-degree turn mid-slide, or steps one square, or jumps three squares in a straight line, diagonally backward.
            ● The Cloud Eagle steps one square diagonally or vertically, or jumps two squares in a straight line diagonally forward, promotes to Square Mover, which slides orthogonally forward and can optionally make a single 90-degree turn mid-slide, or steps one square, or jumps three squares in a straight line, orthogonally sideways or backward.
            ● The Great Leopard steps one square straight backward or diagonally forward, or slides sideways, promotes to Flying Ox, which slides in any diagonal or vertical direction.
            ● The Running Wolf steps one square sideways or diagonally forward, or slides vertically, promotes to Free Boar, which slides in any diagonal or sideways direction.
            ● The Great Elephant steps one square diagonally backward or orthogonally sideways or forward, or slides diagonally forward, promotes to Teaching King, which slides vertically or forward, or steps one square sideways or diagonally backward.
            ● The Kirin steps one square diagonally or jumps two squares in a straight line along any orthogonal direction, promotes to Bishop.
            ● The Phoenix steps one square orthogonally or jumps two squares in a straight line along any diagonal direction, promotes to Rook.
            ● The Bishop General slide-jumps‡ diagonally, promotes to Vice General, which slide-jumps‡ diagonally or jumps anywhere within a distance of exactly two squares.
            ● The Rook General slide-jumps‡ orthogonally, promotes to Great General, which slide-jumps‡ in any direction.
            ● The Lion Hawk Hawk slides diagonally or jumps anywhere within a distance of exactly two squares, does not promote.
            ● The Queen slides in any orthogonal or diagonal direction, does not promote.
            ● The Capricorn slides diagonally and can optionally make a single 90-degree turn mid-slide, does not promote.
            ● The Hook Mover slides orthogonally and can optionally make a single 90-degree turn mid-slide, does not promote.
            ● ‡Slide-jump: slides in this direction, and optionally jumping up to three pieces along the line of attack when capturing, except this cannot capture a King by jumping.
            ● The promotion zone is the farthest four ranks of the board.
        ● In over-the-board play, the minimum number of points needed to not lose during an impasse is 103. Each Hook Mover, Capricorn, Rook General, or Bishop General, promoted or not, scores 10 points for the owning player, each Queen, Lion Hawk, Rook, Bishop, Phoenix, or Kirin, promoted or not, scores 5 points for the owning player, and all other pieces except Kings score 1 point each.")
        (id "4118")
        (source "<a href=\\"https:
        ")
        (version "1.3.14")
        (classification "board/war/replacement/checkmate/shogi")
        (author "A. M. DeWitt")
        (credit "A. M. DeWitt")
        (date "2023")
        }
    )
    
    (graphics {
        (player Colour P1 (colour White))
        (player Colour P2 (colour White))
        (board Style Shogi)
        (piece Style ExtendedShogi)
        (piece Rotate P2 degrees:180)
        (piece Colour "Tokin" strokeColour:(colour Red))
        (piece Colour "GreatLeopard" strokeColour:(colour Red))
        (piece Colour "RunningWolf" strokeColour:(colour Red))
        (piece Colour "GreatElephant" strokeColour:(colour Red))
        (piece Colour "HeavenlyHorse" strokeColour:(colour Red))
        (piece Colour "FreePup" strokeColour:(colour Red))
        (piece Colour "Dove" strokeColour:(colour Red))
        (piece Colour "FreeTiger" strokeColour:(colour Red))
        (piece Colour "GreatStag" strokeColour:(colour Red))
        (piece Colour "TreacherousFox" strokeColour:(colour Red))
        (piece Colour "HornedFalcon" strokeColour:(colour Red))
        (piece Colour "SoaringEagle" strokeColour:(colour Red))
        (piece Colour "FreeBoar" strokeColour:(colour Red))
        (piece Colour "FlyingOx" strokeColour:(colour Red))
        (piece Colour "DragonHorse" strokeColour:(colour Red))
        (piece Colour "DragonKing" strokeColour:(colour Red))
    })
    
)