#------------------------------------------------------------------------------
(define "ArchwormMove" 
    (or
        {
        (move
            (from (sites Occupied by:Mover) if:(is In (from) (sites Board))) 
            (to (sites Around (from) <Board:directions> if:(is Empty (to))))
        )
        (if
            (not (is Empty (handSite Mover)))
            (move Select
                (from (sites Board) if:(is Empty (to)))
                (then
                    (fromTo
                        (from (handSite Mover))
                        (to (last To))
            )))
    )
    (move 
        (from (sites Occupied by:Mover) if:(is In (from) (sites Board))) 
        (to (handSite Mover))
    )
    }
    (then
        (and
            (<Board:wormVariant> Mover)  
            (if 
                (and
                    {
                    <Alternation:variant> 
                    "NewTurn" 
                    (!= -1 (counter))
                    }
                )
                (moveAgain)  
)))))

#------------------------------------------------------------------------------


(game "Archworm"
    (players 2)
    (equipment
        {
        <Board:used>
        (hand Each size:1)
    
    (piece "Ball" Each)
    }
)
(rules
    (start
        {
        (set Score Each 0)
        (place Stack "Ball1" Cell (handSite 1) count:13)
        (place Stack "Ball2" Cell (handSite 2) count:13)
        }
    )
    (play
        ("ArchwormMove") 
    )
    (end 
        (if 
            (= 
                <Winning:count>
                (score Mover)
            )
            (result Mover Win)             
))))

#------------------------------------------------------------------------------


(define "ScoreWormsOf"
    (set Score #1
        (^
            (+
                (results
                    from:(forEach
                        (sites Occupied by:#1)
                        if:(is Pattern {F R F R F R} Cell from:(site))
                    )
                    to:(forEach
                        (sites {(from)})
                        
                            
                                
                                
                                if:(no Pieces Mover 
                                    in:(sites Around (sites Pattern {F R F R F R} Cell from:(site)) <Board:directions>)
                            ))
                            1
                    ))
                    2
        )))
        
        (define "ScoreRestrictedWormsOf"
            (set Score #1
                (^
                    (+
                        (results
                            from:(forEach
                                (sites Occupied by:#1)
                                if:(and
                                    {
                                    
                                    
                                    (= 1 (count Pieces #1 in:(sites Around (site) Orthogonal))) 
                                    
                                    
                                    (or
                                        
                                        
                                        {
                                        (= 1 (count Pieces #1 in:(intersection
                                                    (sites Direction from:(site) N distance:1)
                                                    (sites Around (site) Orthogonal)
                                        )))
                                        (= 1 (count Pieces #1 in:(intersection
                                                    (sites Direction from:(site) E distance:1)
                                                    (sites Around (site) Orthogonal)
                                        )))
                                        (= 1 (count Pieces #1 in:(intersection
                                                    (sites Direction from:(site) W distance:1)
                                                    (sites Around (site) Orthogonal)
                                        )))
                                        (= 1 (count Pieces #1 in:(intersection
                                                    (sites Direction from:(site) S distance:1)
                                                    (sites Around (site) Orthogonal)
                                        )))
                                        }
                                    )
                                    
                                    
                                    (or
                                        (is Pattern {F R F R F } Cell from:(site))
                                        (is Pattern {F L F L F } Cell from:(site))
                                    )
                                    
                                    
                                    (no Pieces #1 
                                        in:(sites Around (sites Pattern {F R F R F } Cell from:(site)) Orthogonal)
                                    )
                                    (no Pieces #1 
                                        in:(sites Around (sites Pattern {F L F L F } Cell from:(site)) Orthogonal)
                                    )
                                    }
                            ))
                            to:(from)  
                            1
                    ))
                    2
                )
        ))
        
        (define "ScoreDiagonalEndedWormsOf"
            (set Score #1 0
                (then
                    (forEach Group Adjacent
                        if:(and
                            (is #1 (who at:(to)))
                            (= 1 (count Pieces #1 in:(sites Around (to) Diagonal)))
                        ) 
                        (if
                            (and
                                {
                                (= 4 (size Array (array (sites))))
                                (no Pieces #1 in:(sites Around (sites) Adjacent))
                                (or
                                    (= 1 
                                        (size Array
                                            (array
                                                (intersection 
                                                    (sites)
                                                    (sites Around (regionSite (sites) index:0) distance:3 Orthogonal)
                                    ))))
                                    (= 1 
                                        (size Array
                                            (array
                                                (intersection 
                                                    (sites)
                                                    (sites Around (regionSite (sites) index:3) distance:3 Orthogonal)
                                )))))
                                }
                            )
                            (addScore #1 1)
                        )
                        (then (set Score #1 (^ (score #1) 2)))
        ))))
        
        #------------------------------------------------------------------------------
        
        
        
        
        (define "SymRemover" (renumber (rotate (* (- #1 1) (/ 360 #1)) (trim (remove #2 #3)))))
        (define "RaggedTri" ("SymRemover" 1 ("SymRemover" 3 ("SymRemover" 3 #1 #2) #2) #3))
        
        (option "Board" <Board> args:{<used> <directions> <backgroundSize> <wormVariant>} 
            { 
            (item "Canoe 2003"
                <(board (trim (remove (rectangle 6 13) cells:{0..2 10..13 25 65 68..74 77})) use:Cell)> 
                <Adjacent>
                <1.2>
                <"ScoreDiagonalEndedWormsOf">
                "Canoe 2003 board (61 cell)
                Adjacent movement and separation. (i.e. Orthogonal and Diagonal)
                Canoe angles are 135 degrees.
                Canoes are restricted to those with diagonal ends."
            )
            
            (item "Archworm 2018-04-20 (129) - original"
                <(board (trim (remove (dual (tiling T33434 7)) cells:{0..11 13 45 54 60 65..67 76..78 83..84 90..93 102..105 111..112 117..118 129..130 135 141 150 151 155 160 167..168 171..172 174..176 179..181 183..195})) use:Cell)> 
                <Orthogonal>
                <1.2>
                <"ScoreWormsOf">
                "Archworm Cairo Leaf 2018-04-20 original (129 cell)
                Archworm angles are 150 degrees.
                Orthogonal movement and separation."
            )
            
            (item "Archworm 2018-10-21 (129) - restricted worms"
                <(board (trim (remove (dual (tiling T33434 7)) cells:{0..11 13 45 54 60 65..67 76..78 83..84 90..93 102..105 111..112 117..118 129..130 135 141 150 151 155 160 167..168 171..172 174..176 179..181 183..195})) use:Cell)> 
                <Orthogonal>
                <1.2>
                <"ScoreRestrictedWormsOf">
                "Archworm Cairo Leaf board (129 cell)
                Archworm angles are 150 degrees.
                Orthogonal movement and separation.
                2018-10-21 Restricted worms: One end must be in cardinal direction."
            )
            
            (item "Archworm Cairo (46)"
                <(board (trim (remove (dual (tiling T33434 4)) cells:{0..3 15 20 24 27..28 35..36 39 43 48 60..63})) use:Cell)> 
                <Orthogonal>
                <1.2>
                <"ScoreWormsOf">
                "Archworm Cairo 'Turtleback' board (46 cell)
                Archworm angles are 150 degrees.
                Orthogonal movement and separation."
            )**
            
            (item "Archworm Cairo (46) - restricted worms"
                <(board (trim (remove (dual (tiling T33434 4)) cells:{0..3 15 20 24 27..28 35..36 39 43 48 60..63})) use:Cell)> 
                <Orthogonal>
                <1.2>
                <"ScoreRestrictedWormsOf">
                "Archworm Cairo 'Turtleback' board (46 cell) 
                Archworm angles are 150 degrees.
                Orthogonal movement and separation.
                Restricted worms: One end must be in cardinal direction."
            )*
            
            (item "Hex 3-hole (39)"
                <(board (trim (remove ("RaggedTri" (hex 5 6) cells:{0..3 6 7 21 30} cells:{0..3 5 6 19 27}) cells:{0 1 5 12 17 22 27 34 38 41 49 50})) use:Cell)> 
                <Orthogonal>   
                <1.3>
                <"ScoreWormsOf">
                "3-hole hex-grid board (39 cells)
                Archworm angles are 120 degrees.
                Orthogonal movement and separation."
            )***
            
            (item "Hex 6-hole (63)"
                <(board (trim (remove ("RaggedTri" (hex 6 8) cells:{0..5 8..11 17 18 38 50} cells:{0..5 7..10 15 16 35 45}) cells:{0 1 5 12 13 20 27 34 41 42 49 55 60 67 71 74 82 83})) use:Cell)>
                <Orthogonal>
                <1.3> 
                <"ScoreWormsOf">
                "6-hole hex-grid board (63 cells)
                Archworm angles are 120 degrees.
                Orthogonal movement and separation."
            )**
            }
        )
        
        (option "Alternation" <Alternation>  args:{<variant>} 
            {
            (item "One Action"
                <False>
                "One action per turn."
            )
            
            (item "Two Actions"
                <True>
                "Two actions per turn."
            )
            
            }
        )
        
        (option "Win with" <Winning>  args:{<count>} 
            {
            (item "One worm"
                <1>
                "Goal is to form one worm. (or canoe)"
            )
            
            (item "Two worms"
                <4>
                "Goal is to form two worms. (or canoes)"
            )**
            
            }
        )
        
        #------------------------------------------------------------------------------
        
(define "ColourBackground" (colour 146 175 126))
(define "ColourBackground2" (colour 166 215 146))

(metadata
    (info
        {
        (description "Archworm is an evolution of Canoe Invented in the 1980's but first published as part of 'The Games Colloection' by Pin International and distributed 2003 to the Euopean market.
            
            The game was an attempt to create a pattern-forming game with movement and a pattern of fewer than 5 stones, without stacking. This was accomplished by requiring the pattern be free from self-interference, that is not touch any of one's own stones. 
            
            Through experimentation an arc pattern was found to work best,- but a forced win sequence could easily be found for the first player.  This was resolved by making the board narrow in one direction so that the win-sequence could not be executed.
            
            The whole board was themed as a canoe, and the piece count was limited to 13, as 14 pieces could theoretically form a stalemate pattern across that board, while 13 provided sufficient stones to form multiple arcs while frequently forcing removals. Since removals can be forced, strategy-stealing cannot be applied.
            
            In 2018, while developing Cairo boards for another game, the author realised that the curves on the Cairo board are all of limited length, and that might mean that Canoe could be played on the board without restriction to board size. This game was called 'Archworm' and was implemented by Stephen Tavener on his AiAi website.  Playtesting introduced some variant restrictions on the worms and proved that double move protocol could also be used with the game.
            
            In 2023, after creating a few games based on hexhex boards with cells removed such that all central cells have 5 neighbors, the author realized that this board also should be applicable to the Archworm concept, and wrote this script in Ludii for testing purposes. The Hexhex version has the advantage that the cells all have a regular relationship, making identification of the arc patterns easier.
            
            For all the games, minimal sized boards were found to be sufficient, and help the AI to do reasonable evaluation.
            
            All the versions of the game feature moves with numerous traps that reduce the decision tree drastically - but only after a lookahead of 3+ plies which is just outside the range of the Ai after heuristics have been added. This means the games have a puzzly feeling and players often lose through error. Long cycles are also possible and a move limit or repetition limit is technically required, but not commonly needed because positions are usually too opaque to correctly determine how and when to attempt to cycle. 
            
            The one arc game is more casual. Two arcs introduces more varied forms of pinning, and the opportunity to expand into areas next to an opponent's existing arc.
            
        Scores have been squared to assist the AI inprioritizing wins.")
        (rules "Goal create a specified number of archworms (also called canoes).
            An archworm is 4 of your stones that are arranged as an arc and that are not adjacent to any of your other stones. The angles of the arc are the same at each bend.
            
            These following stone-actions are available to choose from on your turn:
            -- Place your stone.
            -- Move your stone one step to an empty cell.
        -- Remove your stone.")
        (id "4222")
        (version "1.3.14")
        (classification "board/space/pattern")
        (author "Dale W. Walton")
        (credit "Dale W. Walton")
        (date "10-10-2023")
        }
    )
    
    (graphics 
        {
        (player Colour P1 (colour 120 36 0))
        (player Colour P2 (colour Cream))
        (piece Scale "Ball" 0.92 )
        
        (board Colour Phase0 "ColourBackground2")
        (board StyleThickness InnerEdges 0.4)
        (board StyleThickness OuterEdges 0.6)
        (board StyleThickness InnerVertices 0.45)
        (board StyleThickness OuterVertices 0.45)
        (board Colour InnerVertices (colour Grey))
        (board Colour OuterVertices (colour Grey))
        (board Colour InnerEdges (colour Black))
        (board Colour OuterEdges (colour Black))
        
        (board Background image:"Disc" fillColour:"ColourBackground" edgeColour:(colour 180 180 180 20)  scale:<Board:backgroundSize> offsetX:.01 offsetY:.02) 
        (hand Placement P1 scale:.1 offsetX:.05 offsetY:.12)
        (hand Placement P2 scale:.1 offsetX:.9 offsetY:.12)
    (stackType Count) 
    
    }
)
(ai
    (bestAgent "Alpha-Beta")
    (heuristics 
        {
        
        (lineCompletionHeuristic weight:.2 targetLength:2)
        (score weight:.4)
        (centreProximity weight:.1)
        } 
    )
)

)
